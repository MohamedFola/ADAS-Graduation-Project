
Algo_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080013d4  080013d4  000113d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001404  08001404  0001140c  2**0
                  CONTENTS
  4 .ARM          00000000  08001404  08001404  0001140c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001404  0800140c  0001140c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001404  08001404  00011404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001408  08001408  00011408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001140c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000000  0800140c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  0800140c  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001140c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002aff  00000000  00000000  00011435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000d1b  00000000  00000000  00013f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000468  00000000  00000000  00014c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003b0  00000000  00000000  000150b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f7a  00000000  00000000  00015468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000026bc  00000000  00000000  000163e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008150  00000000  00000000  00018a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00020bee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ee0  00000000  00000000  00020c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080013bc 	.word	0x080013bc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080013bc 	.word	0x080013bc

08000170 <RCC_voidInitSysClock>:
#include "../00-RCC/RCC_private.h"
#include "../00-RCC/RCC_register.h"


void RCC_voidInitSysClock(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/*Turn ON HSI with no trimming*/
	RCC->CR = 0x00000081;

#elif SYSTEM_CLK == SYS_CLK_HSE_CRYSTAL
	/*Selecting HSE as system clock without choosing prescaler*/
	RCC->CFGR = 1;
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <RCC_voidInitSysClock+0x24>)
 8000176:	2201      	movs	r2, #1
 8000178:	605a      	str	r2, [r3, #4]

	/*Selecting HSE with no bypass and trimming*/
	RCC->CR = 0x00010080;
 800017a:	4b06      	ldr	r3, [pc, #24]	; (8000194 <RCC_voidInitSysClock+0x24>)
 800017c:	4a06      	ldr	r2, [pc, #24]	; (8000198 <RCC_voidInitSysClock+0x28>)
 800017e:	601a      	str	r2, [r3, #0]

	/*Selecting Clock security system*/
#if RCC_CSS_ENABLE == ENABLE
	SET_BIT(RCC->CR,RCC_CR_CSSON);
#elif RCC_CSS_ENABLE == DISABLE
	CLR_BIT(RCC->CR,RCC_CR_CSSON);
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <RCC_voidInitSysClock+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <RCC_voidInitSysClock+0x24>)
 8000186:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800018a:	6013      	str	r3, [r2, #0]
#endif

}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021000 	.word	0x40021000
 8000198:	00010080 	.word	0x00010080

0800019c <RCC_voidEnableClock>:


u8 RCC_voidEnableClock(u8 Copy_u8PeripheralID,u8 Copy_u8BusId)
{
 800019c:	b480      	push	{r7}
 800019e:	b085      	sub	sp, #20
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	460a      	mov	r2, r1
 80001a6:	71fb      	strb	r3, [r7, #7]
 80001a8:	4613      	mov	r3, r2
 80001aa:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorState = OK;
 80001ac:	2301      	movs	r3, #1
 80001ae:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8PeripheralID <= 31)
 80001b0:	79fb      	ldrb	r3, [r7, #7]
 80001b2:	2b1f      	cmp	r3, #31
 80001b4:	d82a      	bhi.n	800020c <RCC_voidEnableClock+0x70>
	{
		switch (Copy_u8BusId)
 80001b6:	79bb      	ldrb	r3, [r7, #6]
 80001b8:	2b02      	cmp	r3, #2
 80001ba:	d01a      	beq.n	80001f2 <RCC_voidEnableClock+0x56>
 80001bc:	2b02      	cmp	r3, #2
 80001be:	dc22      	bgt.n	8000206 <RCC_voidEnableClock+0x6a>
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d002      	beq.n	80001ca <RCC_voidEnableClock+0x2e>
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d00a      	beq.n	80001de <RCC_voidEnableClock+0x42>
 80001c8:	e01d      	b.n	8000206 <RCC_voidEnableClock+0x6a>
		{
		case RCC_AHB:  SET_BIT(RCC->AHBENR,	Copy_u8PeripheralID); break;
 80001ca:	4b14      	ldr	r3, [pc, #80]	; (800021c <RCC_voidEnableClock+0x80>)
 80001cc:	695a      	ldr	r2, [r3, #20]
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	2101      	movs	r1, #1
 80001d2:	fa01 f303 	lsl.w	r3, r1, r3
 80001d6:	4911      	ldr	r1, [pc, #68]	; (800021c <RCC_voidEnableClock+0x80>)
 80001d8:	4313      	orrs	r3, r2
 80001da:	614b      	str	r3, [r1, #20]
 80001dc:	e018      	b.n	8000210 <RCC_voidEnableClock+0x74>
		case RCC_APB1: SET_BIT(RCC->APB1ENR,Copy_u8PeripheralID); break;
 80001de:	4b0f      	ldr	r3, [pc, #60]	; (800021c <RCC_voidEnableClock+0x80>)
 80001e0:	69da      	ldr	r2, [r3, #28]
 80001e2:	79fb      	ldrb	r3, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f303 	lsl.w	r3, r1, r3
 80001ea:	490c      	ldr	r1, [pc, #48]	; (800021c <RCC_voidEnableClock+0x80>)
 80001ec:	4313      	orrs	r3, r2
 80001ee:	61cb      	str	r3, [r1, #28]
 80001f0:	e00e      	b.n	8000210 <RCC_voidEnableClock+0x74>
		case RCC_APB2: SET_BIT(RCC->APB2ENR,Copy_u8PeripheralID); break;
 80001f2:	4b0a      	ldr	r3, [pc, #40]	; (800021c <RCC_voidEnableClock+0x80>)
 80001f4:	699a      	ldr	r2, [r3, #24]
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	2101      	movs	r1, #1
 80001fa:	fa01 f303 	lsl.w	r3, r1, r3
 80001fe:	4907      	ldr	r1, [pc, #28]	; (800021c <RCC_voidEnableClock+0x80>)
 8000200:	4313      	orrs	r3, r2
 8000202:	618b      	str	r3, [r1, #24]
 8000204:	e004      	b.n	8000210 <RCC_voidEnableClock+0x74>
		default: 	   Local_u8ErrorState = NOK; break;
 8000206:	2302      	movs	r3, #2
 8000208:	73fb      	strb	r3, [r7, #15]
 800020a:	e001      	b.n	8000210 <RCC_voidEnableClock+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 800020c:	2302      	movs	r3, #2
 800020e:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 8000210:	7bfb      	ldrb	r3, [r7, #15]
}
 8000212:	4618      	mov	r0, r3
 8000214:	3714      	adds	r7, #20
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	40021000 	.word	0x40021000

08000220 <PORT_voidInit>:
 * Type        : Synchronous & Non Reentrant                                *
 *                                                                          *
 * description : Initiate all Pins of the Microcontroller                   *
 ****************************************************************************/
void PORT_voidInit( void )
{
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0
	/* --> set the mode for all ports */

	/* port A */
	GPIOA->CRL = PORTA_LOW_MODE;
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <PORT_voidInit+0x44>)
 8000226:	4a10      	ldr	r2, [pc, #64]	; (8000268 <PORT_voidInit+0x48>)
 8000228:	601a      	str	r2, [r3, #0]
	GPIOA->CRH = PORTA_HIGH_MODE;
 800022a:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <PORT_voidInit+0x44>)
 800022c:	4a0f      	ldr	r2, [pc, #60]	; (800026c <PORT_voidInit+0x4c>)
 800022e:	605a      	str	r2, [r3, #4]

	/* port B */
	GPIOB->CRL = PORTB_LOW_MODE;
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <PORT_voidInit+0x50>)
 8000232:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8000236:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = PORTB_HIGH_MODE;
 8000238:	4b0d      	ldr	r3, [pc, #52]	; (8000270 <PORT_voidInit+0x50>)
 800023a:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 800023e:	605a      	str	r2, [r3, #4]

	/* port C */
	GPIOC->CRH = PORTC_HIGH_MODE;
 8000240:	4b0c      	ldr	r3, [pc, #48]	; (8000274 <PORT_voidInit+0x54>)
 8000242:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8000246:	605a      	str	r2, [r3, #4]

	/* --> set initial value for all ports */

	/* port A */
	GPIOA->ODR = PORTA_INITIAL_VALUE;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <PORT_voidInit+0x44>)
 800024a:	2200      	movs	r2, #0
 800024c:	60da      	str	r2, [r3, #12]

	/* port B */
	GPIOB->ODR = PORTB_INITIAL_VALUE;
 800024e:	4b08      	ldr	r3, [pc, #32]	; (8000270 <PORT_voidInit+0x50>)
 8000250:	2200      	movs	r2, #0
 8000252:	60da      	str	r2, [r3, #12]

	/* port C */
	GPIOC->ODR = PORTC_INITIAL_VALUE;
 8000254:	4b07      	ldr	r3, [pc, #28]	; (8000274 <PORT_voidInit+0x54>)
 8000256:	2200      	movs	r2, #0
 8000258:	60da      	str	r2, [r3, #12]
}
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	40010800 	.word	0x40010800
 8000268:	b4bb4414 	.word	0xb4bb4414
 800026c:	444444b4 	.word	0x444444b4
 8000270:	40010c00 	.word	0x40010c00
 8000274:	40011000 	.word	0x40011000

08000278 <MDIO_u8ReadChannel>:
	return Local_u8ErrorStatus;
}
/* ReadChannel is used to read the logic on the pin */
/*the Read value is changed by reference*/
u8 MDIO_u8ReadChannel(u8 Copy_u8Port, u8 Copy_u8Pin, u8 * Copy_pu8ReadValue)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	603a      	str	r2, [r7, #0]
 8000282:	71fb      	strb	r3, [r7, #7]
 8000284:	460b      	mov	r3, r1
 8000286:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorStatus=OK;
 8000288:	2301      	movs	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8Pin >15)
 800028c:	79bb      	ldrb	r3, [r7, #6]
 800028e:	2b0f      	cmp	r3, #15
 8000290:	d902      	bls.n	8000298 <MDIO_u8ReadChannel+0x20>
	{
		Local_u8ErrorStatus=NOK;
 8000292:	2302      	movs	r3, #2
 8000294:	73fb      	strb	r3, [r7, #15]
 8000296:	e030      	b.n	80002fa <MDIO_u8ReadChannel+0x82>
	}
	else
	{
		switch(Copy_u8Port)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	2b03      	cmp	r3, #3
 800029c:	d01e      	beq.n	80002dc <MDIO_u8ReadChannel+0x64>
 800029e:	2b03      	cmp	r3, #3
 80002a0:	dc28      	bgt.n	80002f4 <MDIO_u8ReadChannel+0x7c>
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d002      	beq.n	80002ac <MDIO_u8ReadChannel+0x34>
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d00c      	beq.n	80002c4 <MDIO_u8ReadChannel+0x4c>
 80002aa:	e023      	b.n	80002f4 <MDIO_u8ReadChannel+0x7c>
		{
		case MDIO_PORTA	: *Copy_pu8ReadValue=	GET_BIT(MDIOA->IDR,Copy_u8Pin);	break;
 80002ac:	4b16      	ldr	r3, [pc, #88]	; (8000308 <MDIO_u8ReadChannel+0x90>)
 80002ae:	689a      	ldr	r2, [r3, #8]
 80002b0:	79bb      	ldrb	r3, [r7, #6]
 80002b2:	fa22 f303 	lsr.w	r3, r2, r3
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	f003 0301 	and.w	r3, r3, #1
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	701a      	strb	r2, [r3, #0]
 80002c2:	e01a      	b.n	80002fa <MDIO_u8ReadChannel+0x82>
		case MDIO_PORTB	: *Copy_pu8ReadValue=	GET_BIT(MDIOB->IDR,Copy_u8Pin);	break;
 80002c4:	4b11      	ldr	r3, [pc, #68]	; (800030c <MDIO_u8ReadChannel+0x94>)
 80002c6:	689a      	ldr	r2, [r3, #8]
 80002c8:	79bb      	ldrb	r3, [r7, #6]
 80002ca:	fa22 f303 	lsr.w	r3, r2, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	701a      	strb	r2, [r3, #0]
 80002da:	e00e      	b.n	80002fa <MDIO_u8ReadChannel+0x82>
		case MDIO_PORTC	: *Copy_pu8ReadValue= 	GET_BIT(MDIOC->IDR,Copy_u8Pin);	break;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MDIO_u8ReadChannel+0x98>)
 80002de:	689a      	ldr	r2, [r3, #8]
 80002e0:	79bb      	ldrb	r3, [r7, #6]
 80002e2:	fa22 f303 	lsr.w	r3, r2, r3
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	f003 0301 	and.w	r3, r3, #1
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	683b      	ldr	r3, [r7, #0]
 80002f0:	701a      	strb	r2, [r3, #0]
 80002f2:	e002      	b.n	80002fa <MDIO_u8ReadChannel+0x82>
		default : Local_u8ErrorStatus=NOK ;				break;
 80002f4:	2302      	movs	r3, #2
 80002f6:	73fb      	strb	r3, [r7, #15]
 80002f8:	bf00      	nop
		}
	}
	return Local_u8ErrorStatus;
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80002fc:	4618      	mov	r0, r3
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	bc80      	pop	{r7}
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40010800 	.word	0x40010800
 800030c:	40010c00 	.word	0x40010c00
 8000310:	40011000 	.word	0x40011000

08000314 <MSTK_voidStopInterval>:
	SET_BIT(MSTK->MSTK_CTRL,MSTK_ENABLE);
	MSTK_u8ModeOfinterval=MSTK_PERIODIC_INTERVAL;
}

void MSTK_voidStopInterval(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	/*Disable the STK peripheral*/
	CLR_BIT(MSTK->MSTK_CTRL,MSTK_ENABLE);
 8000318:	4b07      	ldr	r3, [pc, #28]	; (8000338 <MSTK_voidStopInterval+0x24>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a06      	ldr	r2, [pc, #24]	; (8000338 <MSTK_voidStopInterval+0x24>)
 800031e:	f023 0301 	bic.w	r3, r3, #1
 8000322:	6013      	str	r3, [r2, #0]
	/*Clearing load Register*/
	MSTK->MSTK_LOAD=0x00;
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <MSTK_voidStopInterval+0x24>)
 8000326:	2200      	movs	r2, #0
 8000328:	605a      	str	r2, [r3, #4]
	/*Clearing value Register*/
	MSTK->MSTK_VAL=0x00;
 800032a:	4b03      	ldr	r3, [pc, #12]	; (8000338 <MSTK_voidStopInterval+0x24>)
 800032c:	2200      	movs	r2, #0
 800032e:	609a      	str	r2, [r3, #8]
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	bc80      	pop	{r7}
 8000336:	4770      	bx	lr
 8000338:	e000e010 	.word	0xe000e010

0800033c <SysTick_Handler>:
		Global_voidPtrCallbackFunc=Copy_ptrFunc;
	}
	return Local_u8ErrorStatus;
}
void SysTick_Handler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	if(Global_voidPtrCallbackFunc!=NULL)
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <SysTick_Handler+0x30>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	2b00      	cmp	r3, #0
 8000346:	d00e      	beq.n	8000366 <SysTick_Handler+0x2a>
	{
		if(MSTK_u8ModeOfinterval==MSTK_SINGLE_INTERVAL)
 8000348:	4b09      	ldr	r3, [pc, #36]	; (8000370 <SysTick_Handler+0x34>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d107      	bne.n	8000360 <SysTick_Handler+0x24>
		{
			/*Clear load and value registers*/
			MSTK_voidStopInterval();
 8000350:	f7ff ffe0 	bl	8000314 <MSTK_voidStopInterval>
			/*Disable the interrupt*/
			CLR_BIT(MSTK->MSTK_CTRL,MSTK_TICKINT_EN);
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <SysTick_Handler+0x38>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a06      	ldr	r2, [pc, #24]	; (8000374 <SysTick_Handler+0x38>)
 800035a:	f023 0302 	bic.w	r3, r3, #2
 800035e:	6013      	str	r3, [r2, #0]
		}
		Global_voidPtrCallbackFunc();
 8000360:	4b02      	ldr	r3, [pc, #8]	; (800036c <SysTick_Handler+0x30>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4798      	blx	r3
	}
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	2000001c 	.word	0x2000001c
 8000370:	20000020 	.word	0x20000020
 8000374:	e000e010 	.word	0xe000e010

08000378 <EXTI0_IRQHandler>:

	return Local_u8ErrorState;
}

void EXTI0_IRQHandler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE0] != NULL)
 800037c:	4b07      	ldr	r3, [pc, #28]	; (800039c <EXTI0_IRQHandler+0x24>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	2b00      	cmp	r3, #0
 8000382:	d008      	beq.n	8000396 <EXTI0_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE0]();
 8000384:	4b05      	ldr	r3, [pc, #20]	; (800039c <EXTI0_IRQHandler+0x24>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE0);
 800038a:	4b05      	ldr	r3, [pc, #20]	; (80003a0 <EXTI0_IRQHandler+0x28>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a04      	ldr	r2, [pc, #16]	; (80003a0 <EXTI0_IRQHandler+0x28>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	20000024 	.word	0x20000024
 80003a0:	40010400 	.word	0x40010400

080003a4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE1] != NULL)
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <EXTI1_IRQHandler+0x24>)
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d008      	beq.n	80003c2 <EXTI1_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE1]();
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <EXTI1_IRQHandler+0x24>)
 80003b2:	685b      	ldr	r3, [r3, #4]
 80003b4:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE1);
 80003b6:	4b05      	ldr	r3, [pc, #20]	; (80003cc <EXTI1_IRQHandler+0x28>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a04      	ldr	r2, [pc, #16]	; (80003cc <EXTI1_IRQHandler+0x28>)
 80003bc:	f043 0302 	orr.w	r3, r3, #2
 80003c0:	6153      	str	r3, [r2, #20]
	else
	{
		/*Do Nothing*/
	}

}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000024 	.word	0x20000024
 80003cc:	40010400 	.word	0x40010400

080003d0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE2] != NULL)
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <EXTI2_IRQHandler+0x24>)
 80003d6:	689b      	ldr	r3, [r3, #8]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d008      	beq.n	80003ee <EXTI2_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE2]();
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <EXTI2_IRQHandler+0x24>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE2);
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <EXTI2_IRQHandler+0x28>)
 80003e4:	695b      	ldr	r3, [r3, #20]
 80003e6:	4a04      	ldr	r2, [pc, #16]	; (80003f8 <EXTI2_IRQHandler+0x28>)
 80003e8:	f043 0304 	orr.w	r3, r3, #4
 80003ec:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000024 	.word	0x20000024
 80003f8:	40010400 	.word	0x40010400

080003fc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE3] != NULL)
 8000400:	4b07      	ldr	r3, [pc, #28]	; (8000420 <EXTI3_IRQHandler+0x24>)
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	2b00      	cmp	r3, #0
 8000406:	d008      	beq.n	800041a <EXTI3_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE3]();
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <EXTI3_IRQHandler+0x24>)
 800040a:	68db      	ldr	r3, [r3, #12]
 800040c:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE3);
 800040e:	4b05      	ldr	r3, [pc, #20]	; (8000424 <EXTI3_IRQHandler+0x28>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a04      	ldr	r2, [pc, #16]	; (8000424 <EXTI3_IRQHandler+0x28>)
 8000414:	f043 0308 	orr.w	r3, r3, #8
 8000418:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 800041a:	bf00      	nop
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	20000024 	.word	0x20000024
 8000424:	40010400 	.word	0x40010400

08000428 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE4] != NULL)
 800042c:	4b07      	ldr	r3, [pc, #28]	; (800044c <EXTI4_IRQHandler+0x24>)
 800042e:	691b      	ldr	r3, [r3, #16]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d008      	beq.n	8000446 <EXTI4_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE4]();
 8000434:	4b05      	ldr	r3, [pc, #20]	; (800044c <EXTI4_IRQHandler+0x24>)
 8000436:	691b      	ldr	r3, [r3, #16]
 8000438:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE4);
 800043a:	4b05      	ldr	r3, [pc, #20]	; (8000450 <EXTI4_IRQHandler+0x28>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a04      	ldr	r2, [pc, #16]	; (8000450 <EXTI4_IRQHandler+0x28>)
 8000440:	f043 0310 	orr.w	r3, r3, #16
 8000444:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	20000024 	.word	0x20000024
 8000450:	40010400 	.word	0x40010400

08000454 <MTIM2_voidInit>:
u8 Global_u8FlagTIM4=DISABLED;


/*Timer 2 Initialization */
void  MTIM2_voidInit(void)
{ 
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0

	/* Set the Request Event Source*/
#if TIM2_UPDATE_REQUEST_SOURCE ==	ALL_SOURCES
	CLR_BIT(TIM2->CR1,TIM_CR1_URS);
 8000458:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000462:	f023 0304 	bic.w	r3, r3, #4
 8000466:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIM2->CR1,TIM_CR1_URS);
#endif

	/* Set Center Align Mode */
#if TIM2_CENTER_ALIGNED_MODE ==	CENTER_ALIGN_MODE0
	CLR_BIT(TIM2->CR1,TIM_CR1_CMS1);
 8000468:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000472:	f023 0320 	bic.w	r3, r3, #32
 8000476:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIM2->CR1,TIM_CR1_CMS2);
 8000478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000482:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000486:	6013      	str	r3, [r2, #0]
	/*WE CAN ONLY SET A DIRECTION OF COUNTING AT MODE 0 !!*/
	/* SET DIRECTION OF COUNTING */
#if	TIM2_COUNTER_DIRECTION==UP_COUNTER
	CLR_BIT(TIM2->CR1,TIM_CR1_DIR);
 8000488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000492:	f023 0310 	bic.w	r3, r3, #16
 8000496:	6013      	str	r3, [r2, #0]


#if TIM2_AUTO_RELOAD_PRELOAD == ARR_BUFFERED
	SET_BIT(TIM2->CR1,TIM_CR1_ARPE);
#else
	CLR_BIT(TIM2->CR1,TIM_CR1_ARPE);
 8000498:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004a6:	6013      	str	r3, [r2, #0]
#endif

#if TIM2_CAPTURE_COMPARE_INTRUPT_STATUS ==ENABLED
	SET_BIT(TIM2->DIER,TIM_DIER_CC1IE);
#else
	CLR_BIT(TIM2->DIER,TIM_DIER_CC1IE);
 80004a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ac:	68db      	ldr	r3, [r3, #12]
 80004ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b2:	f023 0302 	bic.w	r3, r3, #2
 80004b6:	60d3      	str	r3, [r2, #12]
#endif

	/*Set the required Prescaler value*/
	/*the eqn:F=fCK_PSC / (PSC[15:0] + 1)*/
#if (TIM2_PRESCALE_VALUE>0 && TIM2_PRESCALE_VALUE<=65536)
	TIM2->PSC=TIM2_PRESCALE_VALUE-1;
 80004b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004bc:	2200      	movs	r2, #0
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
#else
#error ("wrong prescale  ")
#endif
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <MTIM3_voidInit>:



/*Timer 3 Initialization */
void  MTIM3_voidInit(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
	/* Set the Request Event Source*/
#if TIM3_UPDATE_REQUEST_SOURCE ==	ALL_SOURCES
	CLR_BIT(TIM3->CR1,TIM_CR1_URS);
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <MTIM3_voidInit+0x5c>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a14      	ldr	r2, [pc, #80]	; (8000524 <MTIM3_voidInit+0x5c>)
 80004d2:	f023 0304 	bic.w	r3, r3, #4
 80004d6:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIM3->CR1,TIM_CR1_URS);
#endif

	/* Set Center Align Mode */
#if TIM3_CENTER_ALIGNED_MODE ==	CENTER_ALIGN_MODE0
	CLR_BIT(TIM3->CR1,TIM_CR1_CMS1);
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <MTIM3_voidInit+0x5c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a11      	ldr	r2, [pc, #68]	; (8000524 <MTIM3_voidInit+0x5c>)
 80004de:	f023 0320 	bic.w	r3, r3, #32
 80004e2:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIM3->CR1,TIM_CR1_CMS2);
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <MTIM3_voidInit+0x5c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <MTIM3_voidInit+0x5c>)
 80004ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ee:	6013      	str	r3, [r2, #0]
	/*WE CAN ONLY SET A DIRECTION OF COUNTING AT MODE 0 !!*/
	/* SET DIRECTION OF COUNTING */
#if	TIM3_COUNTER_DIRECTION==UP_COUNTER
	CLR_BIT(TIM3->CR1,TIM_CR1_DIR);
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <MTIM3_voidInit+0x5c>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <MTIM3_voidInit+0x5c>)
 80004f6:	f023 0310 	bic.w	r3, r3, #16
 80004fa:	6013      	str	r3, [r2, #0]


#if TIM3_AUTO_RELOAD_PRELOAD == ARR_BUFFERED
	SET_BIT(TIM3->CR1,TIM_CR1_ARPE);
#else
	CLR_BIT(TIM3->CR1,TIM_CR1_ARPE);
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <MTIM3_voidInit+0x5c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <MTIM3_voidInit+0x5c>)
 8000502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000506:	6013      	str	r3, [r2, #0]


#if TIM3_CAPTURE_COMPARE_INTRUPT_STATUS ==ENABLED
	SET_BIT(TIM3->DIER,TIM_DIER_CC1IE);
#else
	CLR_BIT(TIM3->DIER,TIM_DIER_CC1IE);
 8000508:	4b06      	ldr	r3, [pc, #24]	; (8000524 <MTIM3_voidInit+0x5c>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <MTIM3_voidInit+0x5c>)
 800050e:	f023 0302 	bic.w	r3, r3, #2
 8000512:	60d3      	str	r3, [r2, #12]
#endif

	/*Set the required Prescaler value*/
	/*the eqn:F=fCK_PSC / (PSC[15:0] + 1)*/
#if (TIM3_PRESCALE_VALUE>0 && TIM3_PRESCALE_VALUE<=65536)
	TIM3->PSC=TIM3_PRESCALE_VALUE-1;
 8000514:	4b03      	ldr	r3, [pc, #12]	; (8000524 <MTIM3_voidInit+0x5c>)
 8000516:	f240 321f 	movw	r2, #799	; 0x31f
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
#else
#error ("wrong prescale  ")
#endif
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	40000400 	.word	0x40000400

08000528 <MTIM2_voidSetBusyWait>:
#endif
}

/*Timer 2 Synchronous mode*/
u8 MTIM2_voidSetBusyWait(u16 Copy_u16Ticks)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	u8 Local_u8ErrorStatus=OK;
 8000532:	2301      	movs	r3, #1
 8000534:	73fb      	strb	r3, [r7, #15]
	if(Copy_u16Ticks<=65536)
	{
		/*Reload the auto reload register with the required ticks*/
		TIM2->ARR=Copy_u16Ticks;
 8000536:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	62d3      	str	r3, [r2, #44]	; 0x2c
		/*Enable the counter*/
		MTIM2_voidStartCounter();
 800053e:	f000 f817 	bl	8000570 <MTIM2_voidStartCounter>
		/*Busy wait until the UIF flag is raised*/
		while (GET_BIT(TIM2->SR,TIM_SR_UIF)==0)
 8000542:	e000      	b.n	8000546 <MTIM2_voidSetBusyWait+0x1e>
		{
			asm("NOP");
 8000544:	bf00      	nop
		while (GET_BIT(TIM2->SR,TIM_SR_UIF)==0)
 8000546:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800054a:	691b      	ldr	r3, [r3, #16]
 800054c:	f003 0301 	and.w	r3, r3, #1
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f7      	beq.n	8000544 <MTIM2_voidSetBusyWait+0x1c>
		}
		/*Clearing the UIF flag by software to be able to be raised again*/
		CLR_BIT(TIM2->SR,TIM_SR_UIF);
 8000554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000558:	691b      	ldr	r3, [r3, #16]
 800055a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800055e:	f023 0301 	bic.w	r3, r3, #1
 8000562:	6113      	str	r3, [r2, #16]
	}
	else
	{
		Local_u8ErrorStatus=NOK;
	}
	return Local_u8ErrorStatus;
 8000564:	7bfb      	ldrb	r3, [r7, #15]
}	
 8000566:	4618      	mov	r0, r3
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
	...

08000570 <MTIM2_voidStartCounter>:
}


/*Enable the counter to Timer 2 and down the flag to be able for another interrupt to enter the ISR*/
void MTIM2_voidStartCounter(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	Global_u8FlagTIM2=DISABLED;
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <MTIM2_voidStartCounter+0x24>)
 8000576:	2200      	movs	r2, #0
 8000578:	701a      	strb	r2, [r3, #0]
	SET_BIT(TIM2->CR1,TIM_CR1_CEN);
 800057a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000070 	.word	0x20000070

08000598 <MTIM3_voidStartCounter>:


/*Enable the counter to Timer 3 and down the flag to be able for another interrupt to enter the ISR*/
void MTIM3_voidStartCounter(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	Global_u8FlagTIM3=DISABLED;
 800059c:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <MTIM3_voidStartCounter+0x20>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
	SET_BIT(TIM3->CR1,TIM_CR1_CEN);
 80005a2:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MTIM3_voidStartCounter+0x24>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <MTIM3_voidStartCounter+0x24>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6013      	str	r3, [r2, #0]
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bc80      	pop	{r7}
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000071 	.word	0x20000071
 80005bc:	40000400 	.word	0x40000400

080005c0 <TIM2_IRQHandler>:
	return Local_u8ErrorStatus;
}

/*Timer 2 ISR Handler*/
void TIM2_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	if(Global_voidTIM2PtrCallbackFunc!=NULL)
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <TIM2_IRQHandler+0x30>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d00e      	beq.n	80005ea <TIM2_IRQHandler+0x2a>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM2==ENABLED)
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <TIM2_IRQHandler+0x34>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d102      	bne.n	80005da <TIM2_IRQHandler+0x1a>
		{
			Global_voidTIM2PtrCallbackFunc();
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <TIM2_IRQHandler+0x30>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM2->SR,TIM_SR_UIF);
 80005da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005e4:	f023 0301 	bic.w	r3, r3, #1
 80005e8:	6113      	str	r3, [r2, #16]
	}
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000064 	.word	0x20000064
 80005f4:	20000070 	.word	0x20000070

080005f8 <TIM3_IRQHandler>:


/*Timer 3 ISR Handler*/
void TIM3_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	if(Global_voidTIM3PtrCallbackFunc!=NULL)
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <TIM3_IRQHandler+0x2c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00c      	beq.n	800061e <TIM3_IRQHandler+0x26>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM3==ENABLED)
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <TIM3_IRQHandler+0x30>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d102      	bne.n	8000612 <TIM3_IRQHandler+0x1a>
		{
			Global_voidTIM3PtrCallbackFunc();
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <TIM3_IRQHandler+0x2c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM3->SR,TIM_SR_UIF);
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <TIM3_IRQHandler+0x34>)
 8000614:	691b      	ldr	r3, [r3, #16]
 8000616:	4a05      	ldr	r2, [pc, #20]	; (800062c <TIM3_IRQHandler+0x34>)
 8000618:	f023 0301 	bic.w	r3, r3, #1
 800061c:	6113      	str	r3, [r2, #16]
	}
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20000068 	.word	0x20000068
 8000628:	20000071 	.word	0x20000071
 800062c:	40000400 	.word	0x40000400

08000630 <TIM4_IRQHandler>:

/*Timer 4 ISR Handler*/
void TIM4_IRQHandler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	if(Global_voidTIM4PtrCallbackFunc!=NULL)
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <TIM4_IRQHandler+0x2c>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d00c      	beq.n	8000656 <TIM4_IRQHandler+0x26>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM4==ENABLED)
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <TIM4_IRQHandler+0x30>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d102      	bne.n	800064a <TIM4_IRQHandler+0x1a>
		{
			Global_voidTIM4PtrCallbackFunc();
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <TIM4_IRQHandler+0x2c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM4->SR,TIM_SR_UIF);
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <TIM4_IRQHandler+0x34>)
 800064c:	691b      	ldr	r3, [r3, #16]
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <TIM4_IRQHandler+0x34>)
 8000650:	f023 0301 	bic.w	r3, r3, #1
 8000654:	6113      	str	r3, [r2, #16]
	}

}
 8000656:	bf00      	nop
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	2000006c 	.word	0x2000006c
 8000660:	20000072 	.word	0x20000072
 8000664:	40000800 	.word	0x40000800

08000668 <SPI_Init>:
		SPI2_BASE_ADDRESS
};


SPI_Errors_t SPI_Init ( SPI_t* Ptr_SPI )
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	SPI_Errors_t Local_Error = SPI_NoError;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]

	SPI_Number_t Local_SPINumber = Ptr_SPI->SPI_Number;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	73bb      	strb	r3, [r7, #14]


	/**********************/
	/* clear CR2 register */
	/**********************/
	SPI[ Local_SPINumber ]->CR2 = 0;
 800067a:	7bbb      	ldrb	r3, [r7, #14]
 800067c:	4a65      	ldr	r2, [pc, #404]	; (8000814 <SPI_Init+0x1ac>)
 800067e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]


	if ( Local_SPINumber < SPI_COUNT )
 8000686:	7bbb      	ldrb	r3, [r7, #14]
 8000688:	2b01      	cmp	r3, #1
 800068a:	f200 80ba 	bhi.w	8000802 <SPI_Init+0x19a>
	{
		/*******************/
		/* set clock phase */
		/*******************/
		if ( Ptr_SPI->SPI_Phase <= SPI_ClkPhase_TrailingEdge )
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	789b      	ldrb	r3, [r3, #2]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d80e      	bhi.n	80006b4 <SPI_Init+0x4c>
		{
			SPI[ Local_SPINumber ]->CR1 |= ( Ptr_SPI->SPI_Phase << SPI_CR1_CPHA );
 8000696:	7bbb      	ldrb	r3, [r7, #14]
 8000698:	4a5e      	ldr	r2, [pc, #376]	; (8000814 <SPI_Init+0x1ac>)
 800069a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	789b      	ldrb	r3, [r3, #2]
 80006a4:	4618      	mov	r0, r3
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	495a      	ldr	r1, [pc, #360]	; (8000814 <SPI_Init+0x1ac>)
 80006aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006ae:	4302      	orrs	r2, r0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	e001      	b.n	80006b8 <SPI_Init+0x50>
		}
		else
		{
			Local_Error = SPI_ClkPhaseError;
 80006b4:	2302      	movs	r3, #2
 80006b6:	73fb      	strb	r3, [r7, #15]


		/**********************/
		/* set clock polarity */
		/**********************/
		if ( Ptr_SPI->SPI_Polartity <= SPI_ClkPol_IdleHigh )
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	78db      	ldrb	r3, [r3, #3]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d80f      	bhi.n	80006e0 <SPI_Init+0x78>
		{
			SPI[ Local_SPINumber ]->CR1 |= ( Ptr_SPI->SPI_Polartity << SPI_CR1_CPOL );
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	4a54      	ldr	r2, [pc, #336]	; (8000814 <SPI_Init+0x1ac>)
 80006c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	78db      	ldrb	r3, [r3, #3]
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	7bbb      	ldrb	r3, [r7, #14]
 80006d4:	494f      	ldr	r1, [pc, #316]	; (8000814 <SPI_Init+0x1ac>)
 80006d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006da:	4302      	orrs	r2, r0
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	e001      	b.n	80006e4 <SPI_Init+0x7c>
		}
		else
		{
			Local_Error = SPI_ClkPolarityError;
 80006e0:	2303      	movs	r3, #3
 80006e2:	73fb      	strb	r3, [r7, #15]


		/************/
		/* set mode */
		/************/
		if ( Ptr_SPI->SPI_Mode == SPI_Master )
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	785b      	ldrb	r3, [r3, #1]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d10c      	bne.n	8000706 <SPI_Init+0x9e>
		{
			SET_BIT( SPI[ Local_SPINumber ]->CR1, SPI_CR1_MSTR );
 80006ec:	7bbb      	ldrb	r3, [r7, #14]
 80006ee:	4a49      	ldr	r2, [pc, #292]	; (8000814 <SPI_Init+0x1ac>)
 80006f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	7bbb      	ldrb	r3, [r7, #14]
 80006f8:	4946      	ldr	r1, [pc, #280]	; (8000814 <SPI_Init+0x1ac>)
 80006fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006fe:	f042 0204 	orr.w	r2, r2, #4
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	e012      	b.n	800072c <SPI_Init+0xc4>
		}
		else if ( Ptr_SPI->SPI_Mode == SPI_Slave )
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d10c      	bne.n	8000728 <SPI_Init+0xc0>
		{
			CLR_BIT( SPI[ Local_SPINumber ]->CR1, SPI_CR1_MSTR );
 800070e:	7bbb      	ldrb	r3, [r7, #14]
 8000710:	4a40      	ldr	r2, [pc, #256]	; (8000814 <SPI_Init+0x1ac>)
 8000712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000716:	681a      	ldr	r2, [r3, #0]
 8000718:	7bbb      	ldrb	r3, [r7, #14]
 800071a:	493e      	ldr	r1, [pc, #248]	; (8000814 <SPI_Init+0x1ac>)
 800071c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000720:	f022 0204 	bic.w	r2, r2, #4
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	e001      	b.n	800072c <SPI_Init+0xc4>
		}
		else
		{
			Local_Error = SPI_ModeError;
 8000728:	2306      	movs	r3, #6
 800072a:	73fb      	strb	r3, [r7, #15]


		/***************************/
		/* set hardware management */
		/***************************/
		SPI[ Local_SPINumber ]->CR1 |= ( SPI_SW_SLAVE_SELECT << SPI_CR1_SSI );
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	4a39      	ldr	r2, [pc, #228]	; (8000814 <SPI_Init+0x1ac>)
 8000730:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000734:	7bbb      	ldrb	r3, [r7, #14]
 8000736:	4937      	ldr	r1, [pc, #220]	; (8000814 <SPI_Init+0x1ac>)
 8000738:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800073c:	6812      	ldr	r2, [r2, #0]
 800073e:	601a      	str	r2, [r3, #0]


		/*********************/
		/* set the baud rate */
		/*********************/
		if ( Ptr_SPI->SPI_Mode == SPI_Master )
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d12d      	bne.n	80007a4 <SPI_Init+0x13c>
		{
			if ( Ptr_SPI->SPI_ClkRate <= SPI_ClkRateDiv256 )
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	2b07      	cmp	r3, #7
 800074e:	d827      	bhi.n	80007a0 <SPI_Init+0x138>
			{
				SPI[ Local_SPINumber ]->CR1 &= ~( SPI_CLK_MASK << SPI_CR1_BR );
 8000750:	7bbb      	ldrb	r3, [r7, #14]
 8000752:	4a30      	ldr	r2, [pc, #192]	; (8000814 <SPI_Init+0x1ac>)
 8000754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	7bbb      	ldrb	r3, [r7, #14]
 800075c:	492d      	ldr	r1, [pc, #180]	; (8000814 <SPI_Init+0x1ac>)
 800075e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000762:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8000766:	601a      	str	r2, [r3, #0]
				SPI[ Local_SPINumber ]->CR1 |= ( Ptr_SPI->SPI_ClkRate << SPI_CR1_BR );
 8000768:	7bbb      	ldrb	r3, [r7, #14]
 800076a:	4a2a      	ldr	r2, [pc, #168]	; (8000814 <SPI_Init+0x1ac>)
 800076c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	791b      	ldrb	r3, [r3, #4]
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4618      	mov	r0, r3
 800077a:	7bbb      	ldrb	r3, [r7, #14]
 800077c:	4925      	ldr	r1, [pc, #148]	; (8000814 <SPI_Init+0x1ac>)
 800077e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000782:	4302      	orrs	r2, r0
 8000784:	601a      	str	r2, [r3, #0]

				/*********************/
				/* enable NSS output */
				/*********************/
				SET_BIT( SPI[ Local_SPINumber ]->CR2, SPI_CR2_SSOE );
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	4a22      	ldr	r2, [pc, #136]	; (8000814 <SPI_Init+0x1ac>)
 800078a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800078e:	685a      	ldr	r2, [r3, #4]
 8000790:	7bbb      	ldrb	r3, [r7, #14]
 8000792:	4920      	ldr	r1, [pc, #128]	; (8000814 <SPI_Init+0x1ac>)
 8000794:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000798:	f042 0204 	orr.w	r2, r2, #4
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	e001      	b.n	80007a4 <SPI_Init+0x13c>
			}
			else
			{
				Local_Error = SPI_ClkRateError;
 80007a0:	2304      	movs	r3, #4
 80007a2:	73fb      	strb	r3, [r7, #15]


		/******************/
		/* set data order */
		/******************/
		if ( Ptr_SPI->SPI_DataOrder <= SPI_LSBFirst )
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	795b      	ldrb	r3, [r3, #5]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d80f      	bhi.n	80007cc <SPI_Init+0x164>
		{
			SPI[ Local_SPINumber ]->CR1 |= ( Ptr_SPI->SPI_DataOrder << SPI_CR1_LSBFIRST );
 80007ac:	7bbb      	ldrb	r3, [r7, #14]
 80007ae:	4a19      	ldr	r2, [pc, #100]	; (8000814 <SPI_Init+0x1ac>)
 80007b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b4:	681a      	ldr	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	795b      	ldrb	r3, [r3, #5]
 80007ba:	01db      	lsls	r3, r3, #7
 80007bc:	4618      	mov	r0, r3
 80007be:	7bbb      	ldrb	r3, [r7, #14]
 80007c0:	4914      	ldr	r1, [pc, #80]	; (8000814 <SPI_Init+0x1ac>)
 80007c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007c6:	4302      	orrs	r2, r0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	e001      	b.n	80007d0 <SPI_Init+0x168>
		}
		else
		{
			Local_Error = SPI_DataOrderError;
 80007cc:	2305      	movs	r3, #5
 80007ce:	73fb      	strb	r3, [r7, #15]


		/****************************/
		/* set data frame to 8 bits */
		/****************************/
		CLR_BIT( SPI[ Local_SPINumber ]->CR1, SPI_CR1_DFF );
 80007d0:	7bbb      	ldrb	r3, [r7, #14]
 80007d2:	4a10      	ldr	r2, [pc, #64]	; (8000814 <SPI_Init+0x1ac>)
 80007d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	7bbb      	ldrb	r3, [r7, #14]
 80007dc:	490d      	ldr	r1, [pc, #52]	; (8000814 <SPI_Init+0x1ac>)
 80007de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80007e6:	601a      	str	r2, [r3, #0]


		/***************************/
		/* set mode to full-duplex */
		/***************************/
		CLR_BIT( SPI[ Local_SPINumber ]->CR1, SPI_CR1_RXONLY );
 80007e8:	7bbb      	ldrb	r3, [r7, #14]
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <SPI_Init+0x1ac>)
 80007ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f0:	681a      	ldr	r2, [r3, #0]
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	4907      	ldr	r1, [pc, #28]	; (8000814 <SPI_Init+0x1ac>)
 80007f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	e001      	b.n	8000806 <SPI_Init+0x19e>
	}
	else
	{
		Local_Error = SPI_PointerError;
 8000802:	2301      	movs	r3, #1
 8000804:	73fb      	strb	r3, [r7, #15]


	/**************************/
	/* return the error state */
	/**************************/
	return Local_Error;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	080013f0 	.word	0x080013f0

08000818 <SPI_SynchTransceiveByte>:
	return Local_Error;
}


SPI_Errors_t SPI_SynchTransceiveByte( SPI_Number_t Copy_SPI, u8 Copy_u8DataSend, u8* Ptr_u8DataReceived )
{
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	603a      	str	r2, [r7, #0]
 8000822:	71fb      	strb	r3, [r7, #7]
 8000824:	460b      	mov	r3, r1
 8000826:	71bb      	strb	r3, [r7, #6]
	SPI_Errors_t Local_Error = SPI_NoError;
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]

	if ( Copy_SPI < SPI_COUNT )
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d824      	bhi.n	800087c <SPI_SynchTransceiveByte+0x64>
	{

		/***************************************/
		/* put the data into the data register */
		/***************************************/
		SPI[ Copy_SPI ]->DR = Copy_u8DataSend;
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	4a15      	ldr	r2, [pc, #84]	; (800088c <SPI_SynchTransceiveByte+0x74>)
 8000836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083a:	79ba      	ldrb	r2, [r7, #6]
 800083c:	60da      	str	r2, [r3, #12]


		/*****************************************************/
		/* wait until transmission and reception is complete */
		/*****************************************************/
		while ( !GET_BIT( SPI[ Copy_SPI ]->SR, SPI_SR_TXE ) );
 800083e:	bf00      	nop
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	4a12      	ldr	r2, [pc, #72]	; (800088c <SPI_SynchTransceiveByte+0x74>)
 8000844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000848:	689b      	ldr	r3, [r3, #8]
 800084a:	085b      	lsrs	r3, r3, #1
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0f5      	beq.n	8000840 <SPI_SynchTransceiveByte+0x28>
		while (  GET_BIT( SPI[ Copy_SPI ]->SR, SPI_SR_BSY ) );
 8000854:	bf00      	nop
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <SPI_SynchTransceiveByte+0x74>)
 800085a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	09db      	lsrs	r3, r3, #7
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1f5      	bne.n	8000856 <SPI_SynchTransceiveByte+0x3e>


		/*****************************************/
		/* put the received data to the variable */
		/*****************************************/
		( *Ptr_u8DataReceived ) = SPI[ Copy_SPI ]->DR;
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4a07      	ldr	r2, [pc, #28]	; (800088c <SPI_SynchTransceiveByte+0x74>)
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	b2da      	uxtb	r2, r3
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	701a      	strb	r2, [r3, #0]
 800087a:	e001      	b.n	8000880 <SPI_SynchTransceiveByte+0x68>
	}
	else
	{
		Local_Error = SPI_PointerError;
 800087c:	2301      	movs	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]


	/**************************/
	/* return the local error */
	/**************************/
	return Local_Error;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr
 800088c:	080013f0 	.word	0x080013f0

08000890 <SPI_State>:


SPI_Errors_t SPI_State ( SPI_Number_t Copy_SPI, SPI_State_t Copy_u8Status )
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	460a      	mov	r2, r1
 800089a:	71fb      	strb	r3, [r7, #7]
 800089c:	4613      	mov	r3, r2
 800089e:	71bb      	strb	r3, [r7, #6]
	SPI_Errors_t Local_Error = SPI_NoError;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]

	if ( Copy_SPI < SPI_COUNT )
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d822      	bhi.n	80008f0 <SPI_State+0x60>
	{
		if ( Copy_u8Status == SPI_Enable )
 80008aa:	79bb      	ldrb	r3, [r7, #6]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d10c      	bne.n	80008ca <SPI_State+0x3a>
		{
			/*************************/
			/* enable SPI peripheral */
			/*************************/
			SET_BIT( SPI[ Copy_SPI ]->CR1, SPI_CR1_SPE );
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4a13      	ldr	r2, [pc, #76]	; (8000900 <SPI_State+0x70>)
 80008b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4910      	ldr	r1, [pc, #64]	; (8000900 <SPI_State+0x70>)
 80008be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	e014      	b.n	80008f4 <SPI_State+0x64>
		}
		else if ( Copy_u8Status == SPI_Disable )
 80008ca:	79bb      	ldrb	r3, [r7, #6]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d10c      	bne.n	80008ea <SPI_State+0x5a>
		{
			/**************************/
			/* disable SPI peripheral */
			/**************************/
			CLR_BIT( SPI[ Copy_SPI ]->CR1, SPI_CR1_SPE );
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a0b      	ldr	r2, [pc, #44]	; (8000900 <SPI_State+0x70>)
 80008d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008d8:	681a      	ldr	r2, [r3, #0]
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	4908      	ldr	r1, [pc, #32]	; (8000900 <SPI_State+0x70>)
 80008de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e004      	b.n	80008f4 <SPI_State+0x64>
		}
		else
		{
			Local_Error = SPI_StateError;
 80008ea:	2307      	movs	r3, #7
 80008ec:	73fb      	strb	r3, [r7, #15]
 80008ee:	e001      	b.n	80008f4 <SPI_State+0x64>
		}

	}
	else
	{
		Local_Error = SPI_PointerError;
 80008f0:	2301      	movs	r3, #1
 80008f2:	73fb      	strb	r3, [r7, #15]


	/**************************/
	/* return the local error */
	/**************************/
	return Local_Error;
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	080013f0 	.word	0x080013f0

08000904 <USART_voidInit>:

/* Array of Addresses which has type of Struct to addresses USART_t*/
static volatile USART_t* const USART [3] = { USART_1 , USART_2 , USART_3 };

void USART_voidInit(USART_config_t *USART_ptr)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	u8 Local_u8USARTNum=USART_ptr->USART_Number;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	73fb      	strb	r3, [r7, #15]


	/*Calculating the value of BRR corresponding to the BaudRate*/
	u32 Local_u32Mantissa= CLOCK_FREQ / ( 16 * (USART_ptr -> USART_BaudRate ) );
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	011b      	lsls	r3, r3, #4
 8000918:	4a95      	ldr	r2, [pc, #596]	; (8000b70 <USART_voidInit+0x26c>)
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	617b      	str	r3, [r7, #20]
	u32 Local_u32Fraction = ((( CLOCK_FREQ * 100 ) / ( 16 * (USART_ptr->USART_BaudRate) )) % 100 ) * 16 ;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	011b      	lsls	r3, r3, #4
 8000926:	4a93      	ldr	r2, [pc, #588]	; (8000b74 <USART_voidInit+0x270>)
 8000928:	fbb2 f2f3 	udiv	r2, r2, r3
 800092c:	4b92      	ldr	r3, [pc, #584]	; (8000b78 <USART_voidInit+0x274>)
 800092e:	fba3 1302 	umull	r1, r3, r3, r2
 8000932:	095b      	lsrs	r3, r3, #5
 8000934:	2164      	movs	r1, #100	; 0x64
 8000936:	fb01 f303 	mul.w	r3, r1, r3
 800093a:	1ad3      	subs	r3, r2, r3
 800093c:	011b      	lsls	r3, r3, #4
 800093e:	613b      	str	r3, [r7, #16]

	if( Local_u32Fraction > 1500 )
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000946:	4293      	cmp	r3, r2
 8000948:	d904      	bls.n	8000954 <USART_voidInit+0x50>
	{
		Local_u32Mantissa += 1 ;
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
		Local_u32Fraction = 0 ;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
	}
	USART [Local_u8USARTNum] -> BRR	= ( Local_u32Mantissa << 4 ) | ( Local_u32Fraction / 100 );
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	0119      	lsls	r1, r3, #4
 8000958:	693b      	ldr	r3, [r7, #16]
 800095a:	4a87      	ldr	r2, [pc, #540]	; (8000b78 <USART_voidInit+0x274>)
 800095c:	fba2 2303 	umull	r2, r3, r2, r3
 8000960:	095a      	lsrs	r2, r3, #5
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	4885      	ldr	r0, [pc, #532]	; (8000b7c <USART_voidInit+0x278>)
 8000966:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800096a:	430a      	orrs	r2, r1
 800096c:	609a      	str	r2, [r3, #8]


	/*Enabling the TX and RX*/
	SET_BIT( USART[Local_u8USARTNum] -> CR1 , USART_TE);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	4a82      	ldr	r2, [pc, #520]	; (8000b7c <USART_voidInit+0x278>)
 8000972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000976:	68da      	ldr	r2, [r3, #12]
 8000978:	7bfb      	ldrb	r3, [r7, #15]
 800097a:	4980      	ldr	r1, [pc, #512]	; (8000b7c <USART_voidInit+0x278>)
 800097c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000980:	f042 0208 	orr.w	r2, r2, #8
 8000984:	60da      	str	r2, [r3, #12]
	SET_BIT( USART[Local_u8USARTNum] -> CR1 , USART_RE);
 8000986:	7bfb      	ldrb	r3, [r7, #15]
 8000988:	4a7c      	ldr	r2, [pc, #496]	; (8000b7c <USART_voidInit+0x278>)
 800098a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098e:	68da      	ldr	r2, [r3, #12]
 8000990:	7bfb      	ldrb	r3, [r7, #15]
 8000992:	497a      	ldr	r1, [pc, #488]	; (8000b7c <USART_voidInit+0x278>)
 8000994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000998:	f042 0204 	orr.w	r2, r2, #4
 800099c:	60da      	str	r2, [r3, #12]

	/*Parity Check Enable*/
	if(USART_ptr->USART_ParityCheck == USART_ParityCheckEnabled)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	7adb      	ldrb	r3, [r3, #11]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d10c      	bne.n	80009c0 <USART_voidInit+0xbc>
	{
		SET_BIT(USART [Local_u8USARTNum] -> CR1 , USART_PCE);
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
 80009a8:	4a74      	ldr	r2, [pc, #464]	; (8000b7c <USART_voidInit+0x278>)
 80009aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ae:	68da      	ldr	r2, [r3, #12]
 80009b0:	7bfb      	ldrb	r3, [r7, #15]
 80009b2:	4972      	ldr	r1, [pc, #456]	; (8000b7c <USART_voidInit+0x278>)
 80009b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	e00b      	b.n	80009d8 <USART_voidInit+0xd4>
	}
	else
	{
		CLR_BIT(USART [Local_u8USARTNum] -> CR1 , USART_PCE);
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
 80009c2:	4a6e      	ldr	r2, [pc, #440]	; (8000b7c <USART_voidInit+0x278>)
 80009c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c8:	68da      	ldr	r2, [r3, #12]
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	496b      	ldr	r1, [pc, #428]	; (8000b7c <USART_voidInit+0x278>)
 80009ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80009d6:	60da      	str	r2, [r3, #12]
	}
	/*Even or Odd Parity  */
	if(USART_ptr->USART_Parity == USART_EvenParity )
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	7a5b      	ldrb	r3, [r3, #9]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10c      	bne.n	80009fa <USART_voidInit+0xf6>
	{
		CLR_BIT(USART [Local_u8USARTNum] -> CR1, USART_PS );
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	4a66      	ldr	r2, [pc, #408]	; (8000b7c <USART_voidInit+0x278>)
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	68da      	ldr	r2, [r3, #12]
 80009ea:	7bfb      	ldrb	r3, [r7, #15]
 80009ec:	4963      	ldr	r1, [pc, #396]	; (8000b7c <USART_voidInit+0x278>)
 80009ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009f2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	e00f      	b.n	8000a1a <USART_voidInit+0x116>
	}
	else if( USART_ptr -> USART_Parity == USART_OddParity )
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	7a5b      	ldrb	r3, [r3, #9]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d10b      	bne.n	8000a1a <USART_voidInit+0x116>
	{
		SET_BIT(USART [Local_u8USARTNum] -> CR1, USART_PS );
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	4a5d      	ldr	r2, [pc, #372]	; (8000b7c <USART_voidInit+0x278>)
 8000a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0a:	68da      	ldr	r2, [r3, #12]
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	495b      	ldr	r1, [pc, #364]	; (8000b7c <USART_voidInit+0x278>)
 8000a10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a18:	60da      	str	r2, [r3, #12]
	}



	/*Data length*/
	if(USART_ptr -> USART_DataLength == USART_Data8Bits)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7a1b      	ldrb	r3, [r3, #8]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d10c      	bne.n	8000a3c <USART_voidInit+0x138>
	{
		CLR_BIT ( USART[Local_u8USARTNum] -> CR1 , USART_M );
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
 8000a24:	4a55      	ldr	r2, [pc, #340]	; (8000b7c <USART_voidInit+0x278>)
 8000a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a2a:	68da      	ldr	r2, [r3, #12]
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
 8000a2e:	4953      	ldr	r1, [pc, #332]	; (8000b7c <USART_voidInit+0x278>)
 8000a30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	e00f      	b.n	8000a5c <USART_voidInit+0x158>
	}
	else if(USART_ptr -> USART_DataLength == USART_Data9Bits)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	7a1b      	ldrb	r3, [r3, #8]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10b      	bne.n	8000a5c <USART_voidInit+0x158>
	{
		SET_BIT ( USART[Local_u8USARTNum] -> CR1 , USART_M );
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	4a4d      	ldr	r2, [pc, #308]	; (8000b7c <USART_voidInit+0x278>)
 8000a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4c:	68da      	ldr	r2, [r3, #12]
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	494a      	ldr	r1, [pc, #296]	; (8000b7c <USART_voidInit+0x278>)
 8000a52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a56:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a5a:	60da      	str	r2, [r3, #12]
	}


	/*Number of Stop bits*/
	if(USART_ptr -> USART_StopBits == USART_1StopBits)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	7a9b      	ldrb	r3, [r3, #10]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d118      	bne.n	8000a96 <USART_voidInit+0x192>
	{
		CLR_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP1 );
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
 8000a66:	4a45      	ldr	r2, [pc, #276]	; (8000b7c <USART_voidInit+0x278>)
 8000a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a6c:	691a      	ldr	r2, [r3, #16]
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
 8000a70:	4942      	ldr	r1, [pc, #264]	; (8000b7c <USART_voidInit+0x278>)
 8000a72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a7a:	611a      	str	r2, [r3, #16]
		CLR_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP0 );
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	4a3f      	ldr	r2, [pc, #252]	; (8000b7c <USART_voidInit+0x278>)
 8000a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a84:	691a      	ldr	r2, [r3, #16]
 8000a86:	7bfb      	ldrb	r3, [r7, #15]
 8000a88:	493c      	ldr	r1, [pc, #240]	; (8000b7c <USART_voidInit+0x278>)
 8000a8a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000a92:	611a      	str	r2, [r3, #16]
 8000a94:	e055      	b.n	8000b42 <USART_voidInit+0x23e>
	}
	else if(USART_ptr -> USART_StopBits == USART_2StopBits)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7a9b      	ldrb	r3, [r3, #10]
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d118      	bne.n	8000ad0 <USART_voidInit+0x1cc>
	{
		SET_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP1 );
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
 8000aa0:	4a36      	ldr	r2, [pc, #216]	; (8000b7c <USART_voidInit+0x278>)
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	691a      	ldr	r2, [r3, #16]
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	4934      	ldr	r1, [pc, #208]	; (8000b7c <USART_voidInit+0x278>)
 8000aac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ab4:	611a      	str	r2, [r3, #16]
		CLR_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP0 );
 8000ab6:	7bfb      	ldrb	r3, [r7, #15]
 8000ab8:	4a30      	ldr	r2, [pc, #192]	; (8000b7c <USART_voidInit+0x278>)
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	691a      	ldr	r2, [r3, #16]
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
 8000ac2:	492e      	ldr	r1, [pc, #184]	; (8000b7c <USART_voidInit+0x278>)
 8000ac4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ac8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000acc:	611a      	str	r2, [r3, #16]
 8000ace:	e038      	b.n	8000b42 <USART_voidInit+0x23e>
	}
	else if(USART_ptr -> USART_StopBits == USART_halfStopBit)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7a9b      	ldrb	r3, [r3, #10]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d118      	bne.n	8000b0a <USART_voidInit+0x206>
	{
		CLR_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP1 );
 8000ad8:	7bfb      	ldrb	r3, [r7, #15]
 8000ada:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <USART_voidInit+0x278>)
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	691a      	ldr	r2, [r3, #16]
 8000ae2:	7bfb      	ldrb	r3, [r7, #15]
 8000ae4:	4925      	ldr	r1, [pc, #148]	; (8000b7c <USART_voidInit+0x278>)
 8000ae6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000aee:	611a      	str	r2, [r3, #16]
		SET_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP0 );
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <USART_voidInit+0x278>)
 8000af4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af8:	691a      	ldr	r2, [r3, #16]
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	491f      	ldr	r1, [pc, #124]	; (8000b7c <USART_voidInit+0x278>)
 8000afe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b06:	611a      	str	r2, [r3, #16]
 8000b08:	e01b      	b.n	8000b42 <USART_voidInit+0x23e>
	}
	else if(USART_ptr -> USART_StopBits == USART_three_halfsStopBits)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	7a9b      	ldrb	r3, [r3, #10]
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d117      	bne.n	8000b42 <USART_voidInit+0x23e>
	{
		SET_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP1 );
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <USART_voidInit+0x278>)
 8000b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1a:	691a      	ldr	r2, [r3, #16]
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
 8000b1e:	4917      	ldr	r1, [pc, #92]	; (8000b7c <USART_voidInit+0x278>)
 8000b20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b28:	611a      	str	r2, [r3, #16]
		SET_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP0 );
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <USART_voidInit+0x278>)
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	691a      	ldr	r2, [r3, #16]
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	4911      	ldr	r1, [pc, #68]	; (8000b7c <USART_voidInit+0x278>)
 8000b38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000b40:	611a      	str	r2, [r3, #16]
	}


		/*Enable the USART*/
		SET_BIT( USART[Local_u8USARTNum] -> CR1 , USART_UE );
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	4a0d      	ldr	r2, [pc, #52]	; (8000b7c <USART_voidInit+0x278>)
 8000b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	490b      	ldr	r1, [pc, #44]	; (8000b7c <USART_voidInit+0x278>)
 8000b50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b58:	60da      	str	r2, [r3, #12]
		/*Clear the status register*/
		USART[Local_u8USARTNum] -> SR = 0x00;
 8000b5a:	7bfb      	ldrb	r3, [r7, #15]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <USART_voidInit+0x278>)
 8000b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]

}
 8000b66:	bf00      	nop
 8000b68:	371c      	adds	r7, #28
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr
 8000b70:	007a1200 	.word	0x007a1200
 8000b74:	2faf0800 	.word	0x2faf0800
 8000b78:	51eb851f 	.word	0x51eb851f
 8000b7c:	080013f8 	.word	0x080013f8

08000b80 <USART_voidTransmitByteSynch>:


void USART_voidTransmitByteSynch(u8	Local_u8Byte , USART_Num_t Copy_USARTNumber)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
	/*Send the Byte to the Data Register*/
	USART[Copy_USARTNumber] -> DR = Local_u8Byte;
 8000b90:	79bb      	ldrb	r3, [r7, #6]
 8000b92:	4a10      	ldr	r2, [pc, #64]	; (8000bd4 <USART_voidTransmitByteSynch+0x54>)
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	79fa      	ldrb	r2, [r7, #7]
 8000b9a:	605a      	str	r2, [r3, #4]

	/*Wait until the transmission complete*/
	while(GET_BIT(USART[Copy_USARTNumber]-> SR , USART_TC) == 0);
 8000b9c:	bf00      	nop
 8000b9e:	79bb      	ldrb	r3, [r7, #6]
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <USART_voidTransmitByteSynch+0x54>)
 8000ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	099b      	lsrs	r3, r3, #6
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d0f5      	beq.n	8000b9e <USART_voidTransmitByteSynch+0x1e>

	/*Clear the transmission Complete flag*/
	CLR_BIT(USART[Copy_USARTNumber] -> SR , USART_TC);
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <USART_voidTransmitByteSynch+0x54>)
 8000bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	79bb      	ldrb	r3, [r7, #6]
 8000bbe:	4905      	ldr	r1, [pc, #20]	; (8000bd4 <USART_voidTransmitByteSynch+0x54>)
 8000bc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bc8:	601a      	str	r2, [r3, #0]

}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	080013f8 	.word	0x080013f8

08000bd8 <USART_voidSendNumber>:
	}

	Copy_ptr_u8_RXArr[Local_u16Iterator] = '\0';
}
void  USART_voidSendNumber(s32 Copy_s32Number, USART_Num_t Copy_USARTNumber)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	70fb      	strb	r3, [r7, #3]

	u8 Local_u8Counter=0,Local_u8SentNumber;
 8000be4:	2300      	movs	r3, #0
 8000be6:	75fb      	strb	r3, [r7, #23]
	u32 Local_u32divisible=1;
 8000be8:	2301      	movs	r3, #1
 8000bea:	613b      	str	r3, [r7, #16]

	if(Copy_s32Number < 0)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	da07      	bge.n	8000c02 <USART_voidSendNumber+0x2a>
	{
		USART_voidTransmitByteSynch('-', Copy_USARTNumber);
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	202d      	movs	r0, #45	; 0x2d
 8000bf8:	f7ff ffc2 	bl	8000b80 <USART_voidTransmitByteSynch>
		Copy_s32Number  *= -1;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	425b      	negs	r3, r3
 8000c00:	607b      	str	r3, [r7, #4]
	}

	s32 Local_u32temp=Copy_s32Number;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	60fb      	str	r3, [r7, #12]

	if(Copy_s32Number==0)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d110      	bne.n	8000c2e <USART_voidSendNumber+0x56>
		USART_voidTransmitByteSynch('0',Copy_USARTNumber);
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	2030      	movs	r0, #48	; 0x30
 8000c12:	f7ff ffb5 	bl	8000b80 <USART_voidTransmitByteSynch>
			Copy_s32Number=Copy_s32Number-(Local_u8SentNumber*Local_u32divisible);
			Local_u32divisible=Local_u32divisible/10;
		}
	}

}
 8000c16:	e038      	b.n	8000c8a <USART_voidSendNumber+0xb2>
			Local_u8Counter++;
 8000c18:	7dfb      	ldrb	r3, [r7, #23]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	75fb      	strb	r3, [r7, #23]
			Local_u32temp=Local_u32temp/10;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <USART_voidSendNumber+0xbc>)
 8000c22:	fb82 1203 	smull	r1, r2, r2, r3
 8000c26:	1092      	asrs	r2, r2, #2
 8000c28:	17db      	asrs	r3, r3, #31
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	60fb      	str	r3, [r7, #12]
		while(Local_u32temp!=0)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1f1      	bne.n	8000c18 <USART_voidSendNumber+0x40>
		while(Local_u8Counter>1)
 8000c34:	e008      	b.n	8000c48 <USART_voidSendNumber+0x70>
			Local_u8Counter--;
 8000c36:	7dfb      	ldrb	r3, [r7, #23]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	75fb      	strb	r3, [r7, #23]
			Local_u32divisible*=10;
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	613b      	str	r3, [r7, #16]
		while(Local_u8Counter>1)
 8000c48:	7dfb      	ldrb	r3, [r7, #23]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d8f3      	bhi.n	8000c36 <USART_voidSendNumber+0x5e>
		while(Local_u32divisible!=0)
 8000c4e:	e019      	b.n	8000c84 <USART_voidSendNumber+0xac>
			Local_u8SentNumber=Copy_s32Number/Local_u32divisible;
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c58:	72fb      	strb	r3, [r7, #11]
			USART_voidTransmitByteSynch(Local_u8SentNumber+'0' ,Copy_USARTNumber);
 8000c5a:	7afb      	ldrb	r3, [r7, #11]
 8000c5c:	3330      	adds	r3, #48	; 0x30
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	78fa      	ldrb	r2, [r7, #3]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff8b 	bl	8000b80 <USART_voidTransmitByteSynch>
			Copy_s32Number=Copy_s32Number-(Local_u8SentNumber*Local_u32divisible);
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	7afb      	ldrb	r3, [r7, #11]
 8000c6e:	6939      	ldr	r1, [r7, #16]
 8000c70:	fb01 f303 	mul.w	r3, r1, r3
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	607b      	str	r3, [r7, #4]
			Local_u32divisible=Local_u32divisible/10;
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <USART_voidSendNumber+0xc0>)
 8000c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	613b      	str	r3, [r7, #16]
		while(Local_u32divisible!=0)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d1e2      	bne.n	8000c50 <USART_voidSendNumber+0x78>
}
 8000c8a:	bf00      	nop
 8000c8c:	3718      	adds	r7, #24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	66666667 	.word	0x66666667
 8000c98:	cccccccd 	.word	0xcccccccd

08000c9c <MCP2515_VidWriteRegister>:
	return Reading;
}


void MCP2515_VidWriteRegister(u8 address, u8 value)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	460a      	mov	r2, r1
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	71bb      	strb	r3, [r7, #6]
	u8 Reading;

	SPI_State( usedSPI , SPI_Enable );
 8000cac:	2100      	movs	r1, #0
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff fdee 	bl	8000890 <SPI_State>
	SPI_SynchTransceiveByte( usedSPI , INST_WRITE , &Reading);
 8000cb4:	f107 030f 	add.w	r3, r7, #15
 8000cb8:	461a      	mov	r2, r3
 8000cba:	2102      	movs	r1, #2
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff fdab 	bl	8000818 <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , address , &Reading);
 8000cc2:	f107 020f 	add.w	r2, r7, #15
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fda4 	bl	8000818 <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , value , &Reading);
 8000cd0:	f107 020f 	add.w	r2, r7, #15
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f7ff fd9d 	bl	8000818 <SPI_SynchTransceiveByte>
	SPI_State( usedSPI, SPI_Disable );
 8000cde:	2101      	movs	r1, #1
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff fdd5 	bl	8000890 <SPI_State>
}
 8000ce6:	bf00      	nop
 8000ce8:	3710      	adds	r7, #16
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <MCP2515_VidSetBitTiming>:


void MCP2515_VidSetBitTiming(u8 cnf1Value, u8 cnf2Value, u8 cnf3Value)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	71bb      	strb	r3, [r7, #6]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	717b      	strb	r3, [r7, #5]
	MCP2515_VidWriteRegister( CNF1 , cnf1Value );
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	4619      	mov	r1, r3
 8000d04:	202a      	movs	r0, #42	; 0x2a
 8000d06:	f7ff ffc9 	bl	8000c9c <MCP2515_VidWriteRegister>
	MCP2515_VidWriteRegister( CNF2 , cnf2Value );
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	2029      	movs	r0, #41	; 0x29
 8000d10:	f7ff ffc4 	bl	8000c9c <MCP2515_VidWriteRegister>
	MCP2515_VidWriteRegister( CNF3 , cnf3Value );
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	4619      	mov	r1, r3
 8000d18:	2028      	movs	r0, #40	; 0x28
 8000d1a:	f7ff ffbf 	bl	8000c9c <MCP2515_VidWriteRegister>
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <MCP2515_VidReset>:


void MCP2515_VidReset()
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
	u8 Reading;

	SPI_State( usedSPI , SPI_Enable);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f7ff fdae 	bl	8000890 <SPI_State>
	SPI_SynchTransceiveByte( usedSPI , INST_RESET , &Reading );
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	461a      	mov	r2, r3
 8000d38:	21c0      	movs	r1, #192	; 0xc0
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff fd6c 	bl	8000818 <SPI_SynchTransceiveByte>
	SPI_State( usedSPI , SPI_Disable );
 8000d40:	2101      	movs	r1, #1
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fda4 	bl	8000890 <SPI_State>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <MCP2515_VidChangeBits>:


void MCP2515_VidChangeBits(u8 RegAddress, u8 Mask, u8 Value)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	71bb      	strb	r3, [r7, #6]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	717b      	strb	r3, [r7, #5]
	u8 Reading;

	SPI_State( usedSPI , SPI_Enable);
 8000d62:	2100      	movs	r1, #0
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fd93 	bl	8000890 <SPI_State>
	SPI_SynchTransceiveByte( usedSPI , INST_BIT_MODIFY , &Reading );
 8000d6a:	f107 030f 	add.w	r3, r7, #15
 8000d6e:	461a      	mov	r2, r3
 8000d70:	2105      	movs	r1, #5
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff fd50 	bl	8000818 <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , RegAddress , &Reading );
 8000d78:	f107 020f 	add.w	r2, r7, #15
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	4619      	mov	r1, r3
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fd49 	bl	8000818 <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , Mask , &Reading);
 8000d86:	f107 020f 	add.w	r2, r7, #15
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	2000      	movs	r0, #0
 8000d90:	f7ff fd42 	bl	8000818 <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , Value , &Reading );
 8000d94:	f107 020f 	add.w	r2, r7, #15
 8000d98:	797b      	ldrb	r3, [r7, #5]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	f7ff fd3b 	bl	8000818 <SPI_SynchTransceiveByte>
	SPI_State( usedSPI , SPI_Disable );
 8000da2:	2101      	movs	r1, #1
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff fd73 	bl	8000890 <SPI_State>
}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <MCP2515_VidSetMode>:


void MCP2515_VidSetMode(u8 mode)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
	MCP2515_VidChangeBits( CANCTRL , 0xE0 , ( mode << 5 ) );
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	015b      	lsls	r3, r3, #5
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	21e0      	movs	r1, #224	; 0xe0
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f7ff ffc2 	bl	8000d50 <MCP2515_VidChangeBits>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <MCP2515_VidInit>:


void MCP2515_VidInit(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
	//	SPI_VidMasterInit();
	SPI_t spi =
 8000dda:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <MCP2515_VidInit+0x40>)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000de2:	6018      	str	r0, [r3, #0]
 8000de4:	3304      	adds	r3, #4
 8000de6:	8019      	strh	r1, [r3, #0]
			.SPI_Polartity = SPI_ClkPol_IdleLow,
			.SPI_ClkRate   = SPI_ClkRateDiv4,
			.SPI_DataOrder = SPI_MSBFirst,
	};

	SPI_Init( &spi );
 8000de8:	463b      	mov	r3, r7
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fc3c 	bl	8000668 <SPI_Init>

	MCP2515_VidReset();
 8000df0:	f7ff ff99 	bl	8000d26 <MCP2515_VidReset>

	//	// enter configuration mode and enable CLKOUT with no prescaler
	MCP2515_VidWriteRegister( CANCTRL , 0x84 ); // 1000 0100
 8000df4:	2184      	movs	r1, #132	; 0x84
 8000df6:	200f      	movs	r0, #15
 8000df8:	f7ff ff50 	bl	8000c9c <MCP2515_VidWriteRegister>

	// to run at 250KHz bitrate using 8MHz osc
	MCP2515_VidSetBitTiming( ( 2 << 6 ) , ( 1 << 7 ) | ( 6 << 3 ) | ( 1 ) , ( 5 ) );
 8000dfc:	2205      	movs	r2, #5
 8000dfe:	21b1      	movs	r1, #177	; 0xb1
 8000e00:	2080      	movs	r0, #128	; 0x80
 8000e02:	f7ff ff74 	bl	8000cee <MCP2515_VidSetBitTiming>

	MCP2515_VidSetMode( MCP2515_MODE_NORMAL );
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff ffd3 	bl	8000db2 <MCP2515_VidSetMode>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	080013d4 	.word	0x080013d4

08000e18 <MCP2515_VidSetRollover>:
}


/****************************RX*******************************/
void MCP2515_VidSetRollover(u8 value)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
	MCP2515_VidChangeBits( RXB0CTRL , ( 1 << BUKT ) , ( value << BUKT ) );
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	2060      	movs	r0, #96	; 0x60
 8000e2e:	f7ff ff8f 	bl	8000d50 <MCP2515_VidChangeBits>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <MCP2515_VidSetMask>:


void MCP2515_VidSetMask(u8 maskAddress, u32 maskValue, u8 extended)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	6039      	str	r1, [r7, #0]
 8000e44:	71fb      	strb	r3, [r7, #7]
 8000e46:	4613      	mov	r3, r2
 8000e48:	71bb      	strb	r3, [r7, #6]
	u8 Reading;

	SPI_State(usedSPI, SPI_Enable);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff fd1f 	bl	8000890 <SPI_State>
	SPI_SynchTransceiveByte( usedSPI , INST_WRITE , &Reading );
 8000e52:	f107 030f 	add.w	r3, r7, #15
 8000e56:	461a      	mov	r2, r3
 8000e58:	2102      	movs	r1, #2
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff fcdc 	bl	8000818 <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , maskAddress , &Reading );
 8000e60:	f107 020f 	add.w	r2, r7, #15
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	4619      	mov	r1, r3
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff fcd5 	bl	8000818 <SPI_SynchTransceiveByte>

	if( extended )
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d02d      	beq.n	8000ed0 <MCP2515_VidSetMask+0x96>
	{
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( maskValue >> 3 ) , &Reading );
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	08db      	lsrs	r3, r3, #3
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f107 020f 	add.w	r2, r7, #15
 8000e7e:	4619      	mov	r1, r3
 8000e80:	2000      	movs	r0, #0
 8000e82:	f7ff fcc9 	bl	8000818 <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( maskValue << 5 ) | ( 1 << 3 ) | ( u8 ) ( maskValue >> 27 ) , &Reading );
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	015b      	lsls	r3, r3, #5
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	0edb      	lsrs	r3, r3, #27
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0308 	orr.w	r3, r3, #8
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	f107 020f 	add.w	r2, r7, #15
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	f7ff fcb7 	bl	8000818 <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( maskValue >> 19 ) , &Reading );
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	0cdb      	lsrs	r3, r3, #19
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	f107 020f 	add.w	r2, r7, #15
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f7ff fcae 	bl	8000818 <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( maskValue >> 11 ) , &Reading );
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	0adb      	lsrs	r3, r3, #11
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	f107 020f 	add.w	r2, r7, #15
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f7ff fca5 	bl	8000818 <SPI_SynchTransceiveByte>
 8000ece:	e012      	b.n	8000ef6 <MCP2515_VidSetMask+0xbc>
	}
	else
	{
		// standard address
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( maskValue >> 3 ) , &Reading );
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	08db      	lsrs	r3, r3, #3
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	f107 020f 	add.w	r2, r7, #15
 8000eda:	4619      	mov	r1, r3
 8000edc:	2000      	movs	r0, #0
 8000ede:	f7ff fc9b 	bl	8000818 <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( maskValue << 5 ) , &Reading );
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	015b      	lsls	r3, r3, #5
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	f107 020f 	add.w	r2, r7, #15
 8000eee:	4619      	mov	r1, r3
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f7ff fc91 	bl	8000818 <SPI_SynchTransceiveByte>
	}

	SPI_State( usedSPI, SPI_Disable );
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fcc9 	bl	8000890 <SPI_State>
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <MCP2515_VidSetFilter>:


void MCP2515_VidSetFilter(u8 filterAddress, u32 filterValue, u8 extended)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	6039      	str	r1, [r7, #0]
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	4613      	mov	r3, r2
 8000f14:	71bb      	strb	r3, [r7, #6]
	u8 Reading;

	SPI_State(usedSPI, SPI_Enable);
 8000f16:	2100      	movs	r1, #0
 8000f18:	2000      	movs	r0, #0
 8000f1a:	f7ff fcb9 	bl	8000890 <SPI_State>
	SPI_SynchTransceiveByte( usedSPI , INST_WRITE , &Reading );
 8000f1e:	f107 030f 	add.w	r3, r7, #15
 8000f22:	461a      	mov	r2, r3
 8000f24:	2102      	movs	r1, #2
 8000f26:	2000      	movs	r0, #0
 8000f28:	f7ff fc76 	bl	8000818 <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , filterAddress , &Reading );
 8000f2c:	f107 020f 	add.w	r2, r7, #15
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	4619      	mov	r1, r3
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff fc6f 	bl	8000818 <SPI_SynchTransceiveByte>

	if( extended )
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d02d      	beq.n	8000f9c <MCP2515_VidSetFilter+0x96>
	{
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( filterValue >> 3 ) , &Reading );
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	08db      	lsrs	r3, r3, #3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f107 020f 	add.w	r2, r7, #15
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f7ff fc63 	bl	8000818 <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( filterValue << 5 ) | ( 1 << 3 ) | ( u8 ) ( filterValue >> 27 ) , &Reading );
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	015b      	lsls	r3, r3, #5
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	0edb      	lsrs	r3, r3, #27
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4313      	orrs	r3, r2
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	f043 0308 	orr.w	r3, r3, #8
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	f107 020f 	add.w	r2, r7, #15
 8000f6e:	4619      	mov	r1, r3
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff fc51 	bl	8000818 <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( filterValue >> 19 ) , &Reading );
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	0cdb      	lsrs	r3, r3, #19
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	f107 020f 	add.w	r2, r7, #15
 8000f80:	4619      	mov	r1, r3
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fc48 	bl	8000818 <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( filterValue >> 11 ) , &Reading );
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	0adb      	lsrs	r3, r3, #11
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f107 020f 	add.w	r2, r7, #15
 8000f92:	4619      	mov	r1, r3
 8000f94:	2000      	movs	r0, #0
 8000f96:	f7ff fc3f 	bl	8000818 <SPI_SynchTransceiveByte>
 8000f9a:	e012      	b.n	8000fc2 <MCP2515_VidSetFilter+0xbc>
	}
	else
	{
		// standard address
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( filterValue >> 3 ) , &Reading );
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	08db      	lsrs	r3, r3, #3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	f107 020f 	add.w	r2, r7, #15
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff fc35 	bl	8000818 <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( filterValue << 5 ) , &Reading );
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	015b      	lsls	r3, r3, #5
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	f107 020f 	add.w	r2, r7, #15
 8000fba:	4619      	mov	r1, r3
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f7ff fc2b 	bl	8000818 <SPI_SynchTransceiveByte>
	}

	SPI_State( usedSPI, SPI_Disable );
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f7ff fc63 	bl	8000890 <SPI_State>
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <MCP2515_VidReceiveInit>:


void MCP2515_VidReceiveInit(void)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
	SPI_t spi =
 8000fd8:	2300      	movs	r3, #0
 8000fda:	703b      	strb	r3, [r7, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	707b      	strb	r3, [r7, #1]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	70bb      	strb	r3, [r7, #2]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	70fb      	strb	r3, [r7, #3]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	713b      	strb	r3, [r7, #4]
 8000fec:	2300      	movs	r3, #0
 8000fee:	717b      	strb	r3, [r7, #5]
			.SPI_Polartity = SPI_ClkPol_IdleLow,
			.SPI_ClkRate   = SPI_ClkRateDiv2,
			.SPI_DataOrder = SPI_MSBFirst,
	};

	SPI_Init( &spi );
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff fb38 	bl	8000668 <SPI_Init>

	MCP2515_VidReset();
 8000ff8:	f7ff fe95 	bl	8000d26 <MCP2515_VidReset>

	//	// enter configuration mode and enable CLKOUT with no prescaler
	MCP2515_VidWriteRegister( CANCTRL, 0x84 );
 8000ffc:	2184      	movs	r1, #132	; 0x84
 8000ffe:	200f      	movs	r0, #15
 8001000:	f7ff fe4c 	bl	8000c9c <MCP2515_VidWriteRegister>

	//	// to run at 250KHz bitrate using 8MHz osc
	MCP2515_VidSetBitTiming( ( 2 << 6 ) , ( 1 << 7 ) | ( 6 << 3 ) | ( 1 ) , ( 5 ) );
 8001004:	2205      	movs	r2, #5
 8001006:	21b1      	movs	r1, #177	; 0xb1
 8001008:	2080      	movs	r0, #128	; 0x80
 800100a:	f7ff fe70 	bl	8000cee <MCP2515_VidSetBitTiming>

	// accept all messages
	MCP2515_VidSetMask( RXM0SIDH , 0xFFFF , 0 );
 800100e:	2200      	movs	r2, #0
 8001010:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001014:	2020      	movs	r0, #32
 8001016:	f7ff ff10 	bl	8000e3a <MCP2515_VidSetMask>
	//MCP2515_VidSetFilter( RXF0SIDH , 0x7E1 , 0 );
	//MCP2515_VidSetFilter( RXF1SIDH , 0x771 , 0 );
	MCP2515_VidSetFilter( RXF0SIDH , 0x771 , 0 );
 800101a:	2200      	movs	r2, #0
 800101c:	f240 7171 	movw	r1, #1905	; 0x771
 8001020:	2000      	movs	r0, #0
 8001022:	f7ff ff70 	bl	8000f06 <MCP2515_VidSetFilter>
	MCP2515_VidSetRollover( 1 );
 8001026:	2001      	movs	r0, #1
 8001028:	f7ff fef6 	bl	8000e18 <MCP2515_VidSetRollover>

	MCP2515_VidWriteRegister( CANINTE , ( 1 << RX0IE ) );
 800102c:	2101      	movs	r1, #1
 800102e:	202b      	movs	r0, #43	; 0x2b
 8001030:	f7ff fe34 	bl	8000c9c <MCP2515_VidWriteRegister>

	MCP2515_VidSetMode( MCP2515_MODE_NORMAL );
 8001034:	2000      	movs	r0, #0
 8001036:	f7ff febc 	bl	8000db2 <MCP2515_VidSetMode>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <MCP2515_VidReceiveCANmsg>:


u8 readBuffer[14];

void MCP2515_VidReceiveCANmsg(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
	u8 Reading;

	SPI_State(usedSPI, SPI_Enable);
 800104a:	2100      	movs	r1, #0
 800104c:	2000      	movs	r0, #0
 800104e:	f7ff fc1f 	bl	8000890 <SPI_State>

	SPI_SynchTransceiveByte( usedSPI , INST_READ , &Reading );
 8001052:	1dbb      	adds	r3, r7, #6
 8001054:	461a      	mov	r2, r3
 8001056:	2103      	movs	r1, #3
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fbdd 	bl	8000818 <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , RXB0CTRL ,  &Reading );
 800105e:	1dbb      	adds	r3, r7, #6
 8001060:	461a      	mov	r2, r3
 8001062:	2160      	movs	r1, #96	; 0x60
 8001064:	2000      	movs	r0, #0
 8001066:	f7ff fbd7 	bl	8000818 <SPI_SynchTransceiveByte>


	for( u8 i = 0 ; i < 14 ; i++ )
 800106a:	2300      	movs	r3, #0
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e00a      	b.n	8001086 <MCP2515_VidReceiveCANmsg+0x42>
	{
		SPI_SynchTransceiveByte( usedSPI , 0 , &readBuffer[ i ] );
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <MCP2515_VidReceiveCANmsg+0x60>)
 8001074:	4413      	add	r3, r2
 8001076:	461a      	mov	r2, r3
 8001078:	2100      	movs	r1, #0
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff fbcc 	bl	8000818 <SPI_SynchTransceiveByte>
	for( u8 i = 0 ; i < 14 ; i++ )
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	3301      	adds	r3, #1
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b0d      	cmp	r3, #13
 800108a:	d9f1      	bls.n	8001070 <MCP2515_VidReceiveCANmsg+0x2c>
	}

	SPI_State( usedSPI, SPI_Disable );
 800108c:	2101      	movs	r1, #1
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff fbfe 	bl	8000890 <SPI_State>

	MCP2515_VidWriteRegister( CANINTF , 0 );
 8001094:	2100      	movs	r1, #0
 8001096:	202c      	movs	r0, #44	; 0x2c
 8001098:	f7ff fe00 	bl	8000c9c <MCP2515_VidWriteRegister>
}
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000074 	.word	0x20000074

080010a8 <CommHandlerInit>:

extern u8 readBuffer[];


void CommHandlerInit( u8 Copy_u8Mode )
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]

	u8 ECU_STATE = Copy_u8Mode;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	73fb      	strb	r3, [r7, #15]

	if ( ECU_STATE == ECU_TRANSMIT )
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d102      	bne.n	80010c2 <CommHandlerInit+0x1a>
		MCP2515_VidInit();
 80010bc:	f7ff fe8a 	bl	8000dd4 <MCP2515_VidInit>
	else if	( ECU_STATE == ECU_RECIEVE )
		MCP2515_VidReceiveInit();
}
 80010c0:	e004      	b.n	80010cc <CommHandlerInit+0x24>
	else if	( ECU_STATE == ECU_RECIEVE )
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d101      	bne.n	80010cc <CommHandlerInit+0x24>
		MCP2515_VidReceiveInit();
 80010c8:	f7ff ff83 	bl	8000fd2 <MCP2515_VidReceiveInit>
}
 80010cc:	bf00      	nop
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <CommHandlerRxIndication>:

Rx_t CommHandlerRxIndication(void){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b090      	sub	sp, #64	; 0x40
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

	Rx_t DataRx ;

	u8 dataR[8]={0};
 80010dc:	2300      	movs	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
	u8 r;
	u8 DataType = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	u32 Data=0;		//1023
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
	/******************************************************************************************/
	/* 		Data Receiving from the CAN	controller	  */
	MDIO_u8ReadChannel( MDIO_PORTA , MDIO_PIN11 , &r );
 80010ee:	f107 030f 	add.w	r3, r7, #15
 80010f2:	461a      	mov	r2, r3
 80010f4:	210b      	movs	r1, #11
 80010f6:	2001      	movs	r0, #1
 80010f8:	f7ff f8be 	bl	8000278 <MDIO_u8ReadChannel>
	if ( r == 0 )
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d11c      	bne.n	800113c <CommHandlerRxIndication+0x68>
	{
		MCP2515_VidReceiveCANmsg();
 8001102:	f7ff ff9f 	bl	8001044 <MCP2515_VidReceiveCANmsg>

				for ( int i = 0 ; i < 8 ; i++ )
 8001106:	2300      	movs	r3, #0
 8001108:	63bb      	str	r3, [r7, #56]	; 0x38
 800110a:	e00c      	b.n	8001126 <CommHandlerRxIndication+0x52>
				{
					dataR[i] = readBuffer[ 6 + i ];
 800110c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800110e:	3306      	adds	r3, #6
 8001110:	4a40      	ldr	r2, [pc, #256]	; (8001214 <CommHandlerRxIndication+0x140>)
 8001112:	5cd1      	ldrb	r1, [r2, r3]
 8001114:	f107 0210 	add.w	r2, r7, #16
 8001118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800111a:	4413      	add	r3, r2
 800111c:	460a      	mov	r2, r1
 800111e:	701a      	strb	r2, [r3, #0]
				for ( int i = 0 ; i < 8 ; i++ )
 8001120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001122:	3301      	adds	r3, #1
 8001124:	63bb      	str	r3, [r7, #56]	; 0x38
 8001126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001128:	2b07      	cmp	r3, #7
 800112a:	ddef      	ble.n	800110c <CommHandlerRxIndication+0x38>
				}


						USART_voidTransmitByteSynch( '\r' , USART1 );
 800112c:	2100      	movs	r1, #0
 800112e:	200d      	movs	r0, #13
 8001130:	f7ff fd26 	bl	8000b80 <USART_voidTransmitByteSynch>
						USART_voidTransmitByteSynch( '\n' , USART1 );
 8001134:	2100      	movs	r1, #0
 8001136:	200a      	movs	r0, #10
 8001138:	f7ff fd22 	bl	8000b80 <USART_voidTransmitByteSynch>
	}
	/********************************************/
	/* 		Data ID  check		*/
	switch(dataR[0]){
 800113c:	7c3b      	ldrb	r3, [r7, #16]
 800113e:	2b03      	cmp	r3, #3
 8001140:	d00e      	beq.n	8001160 <CommHandlerRxIndication+0x8c>
 8001142:	2b03      	cmp	r3, #3
 8001144:	dc10      	bgt.n	8001168 <CommHandlerRxIndication+0x94>
 8001146:	2b01      	cmp	r3, #1
 8001148:	d002      	beq.n	8001150 <CommHandlerRxIndication+0x7c>
 800114a:	2b02      	cmp	r3, #2
 800114c:	d004      	beq.n	8001158 <CommHandlerRxIndication+0x84>
 800114e:	e00b      	b.n	8001168 <CommHandlerRxIndication+0x94>

	case 1: DataType = DISTANCE; break;
 8001150:	2301      	movs	r3, #1
 8001152:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001156:	e00a      	b.n	800116e <CommHandlerRxIndication+0x9a>
	case 2: DataType = SPEED; 	break;
 8001158:	2302      	movs	r3, #2
 800115a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800115e:	e006      	b.n	800116e <CommHandlerRxIndication+0x9a>
	case 3: DataType = STEERING; break;
 8001160:	2303      	movs	r3, #3
 8001162:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001166:	e002      	b.n	800116e <CommHandlerRxIndication+0x9a>
	default:DataType = INVALID_TYPE;
 8001168:	2304      	movs	r3, #4
 800116a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	}
	/********************************************/
	/*  	Data Parsing	 */
	u8 DataLength 	  =  dataR[1] ;
 800116e:	7c7b      	ldrb	r3, [r7, #17]
 8001170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	u32 SummedNumber  =  dataR[2];
 8001174:	7cbb      	ldrb	r3, [r7, #18]
 8001176:	637b      	str	r3, [r7, #52]	; 0x34
	u32 Temp 		  =  dataR[3];
 8001178:	7cfb      	ldrb	r3, [r7, #19]
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
	u32 TargetNumber  =  Temp;
 800117c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800117e:	623b      	str	r3, [r7, #32]

	u8 i=3;
 8001180:	2303      	movs	r3, #3
 8001182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	while( i < DataLength + 2)
 8001186:	e02a      	b.n	80011de <CommHandlerRxIndication+0x10a>
	{
		TargetNumber=Temp;
 8001188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800118a:	623b      	str	r3, [r7, #32]

		if(TargetNumber==0)
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d112      	bne.n	80011b8 <CommHandlerRxIndication+0xe4>
		{
			SummedNumber*=10;
 8001192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
		}

		while(Temp!=0)
 800119e:	e00b      	b.n	80011b8 <CommHandlerRxIndication+0xe4>
		{
			Temp = Temp / 10;
 80011a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011a2:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <CommHandlerRxIndication+0x144>)
 80011a4:	fba2 2303 	umull	r2, r3, r2, r3
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
			SummedNumber *= 10;
 80011ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011ae:	4613      	mov	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4413      	add	r3, r2
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	637b      	str	r3, [r7, #52]	; 0x34
		while(Temp!=0)
 80011b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <CommHandlerRxIndication+0xcc>
		}

		SummedNumber += TargetNumber;
 80011be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011c0:	6a3b      	ldr	r3, [r7, #32]
 80011c2:	4413      	add	r3, r2
 80011c4:	637b      	str	r3, [r7, #52]	; 0x34
		i++;
 80011c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ca:	3301      	adds	r3, #1
 80011cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		Temp=dataR[i];
 80011d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011d4:	3340      	adds	r3, #64	; 0x40
 80011d6:	443b      	add	r3, r7
 80011d8:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
	while( i < DataLength + 2)
 80011de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011e2:	1c5a      	adds	r2, r3, #1
 80011e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dacd      	bge.n	8001188 <CommHandlerRxIndication+0xb4>
	}
	Data = SummedNumber;
 80011ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28
	/**********************************************/
	DataRx.Data 	= Data;
 80011f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011f2:	61fb      	str	r3, [r7, #28]
	DataRx.DataType = DataType;
 80011f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80011f8:	763b      	strb	r3, [r7, #24]
//	USART_voidTransmitByteSynch('D', USART1);
//	USART_voidSendNumber(DataType, USART1);
//	USART_voidTransmitByteSynch('\r', USART1);
//	USART_voidTransmitByteSynch('\n', USART1);

	return DataRx;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	461a      	mov	r2, r3
 80011fe:	f107 0318 	add.w	r3, r7, #24
 8001202:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001206:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	3740      	adds	r7, #64	; 0x40
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000074 	.word	0x20000074
 8001218:	cccccccd 	.word	0xcccccccd

0800121c <main>:
u32 Last_Distance = 0;
u32 Distance      = 0;


int main (void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
	Rx_t First_Distance;
	Rx_t Second_Distance;

	// Clock init
	RCC_voidInitSysClock();
 8001222:	f7fe ffa5 	bl	8000170 <RCC_voidInitSysClock>
	RCC_voidEnableClock( RCC_GPIOA  , RCC_APB2 );
 8001226:	2102      	movs	r1, #2
 8001228:	2002      	movs	r0, #2
 800122a:	f7fe ffb7 	bl	800019c <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_GPIOB  , RCC_APB2 );
 800122e:	2102      	movs	r1, #2
 8001230:	2003      	movs	r0, #3
 8001232:	f7fe ffb3 	bl	800019c <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_GPIOC  , RCC_APB2 );
 8001236:	2102      	movs	r1, #2
 8001238:	2004      	movs	r0, #4
 800123a:	f7fe ffaf 	bl	800019c <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_AFIO   , RCC_APB2 );
 800123e:	2102      	movs	r1, #2
 8001240:	2000      	movs	r0, #0
 8001242:	f7fe ffab 	bl	800019c <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_TIM2   , RCC_APB1 );
 8001246:	2101      	movs	r1, #1
 8001248:	2000      	movs	r0, #0
 800124a:	f7fe ffa7 	bl	800019c <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_TIM3   , RCC_APB1 );
 800124e:	2101      	movs	r1, #1
 8001250:	2001      	movs	r0, #1
 8001252:	f7fe ffa3 	bl	800019c <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_SPI1   , RCC_APB2 );
 8001256:	2102      	movs	r1, #2
 8001258:	200c      	movs	r0, #12
 800125a:	f7fe ff9f 	bl	800019c <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_USART1 , RCC_APB2 );
 800125e:	2102      	movs	r1, #2
 8001260:	200e      	movs	r0, #14
 8001262:	f7fe ff9b 	bl	800019c <RCC_voidEnableClock>

	// port init
	PORT_voidInit();
 8001266:	f7fe ffdb 	bl	8000220 <PORT_voidInit>

	// timers init
	MTIM2_voidInit();
 800126a:	f7ff f8f3 	bl	8000454 <MTIM2_voidInit>
	MTIM3_voidInit();
 800126e:	f7ff f92b 	bl	80004c8 <MTIM3_voidInit>

	// usart init
	USART_config_t uart =
 8001272:	4a29      	ldr	r2, [pc, #164]	; (8001318 <main+0xfc>)
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	ca07      	ldmia	r2, {r0, r1, r2}
 800127a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.USART_Parity      = USART_EvenParity          ,
			.USART_ParityCheck = USART_ParityCheckDisabled ,
			.USART_StopBits    = USART_1StopBits
	};

	USART_voidInit( &uart );
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fb3e 	bl	8000904 <USART_voidInit>
	// communication init



	/* this struct is used to test the communication */
	Tx_t Transmit =
 8001288:	4a24      	ldr	r2, [pc, #144]	; (800131c <main+0x100>)
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001290:	e883 0003 	stmia.w	r3, {r0, r1}
	};



	// start the counter to get the reading of the ultra-sonic every 10 milli
	MTIM3_voidStartCounter();
 8001294:	f7ff f980 	bl	8000598 <MTIM3_voidStartCounter>

	while(1)
	{
		CommHandlerInit( ECU_TRANSMIT );
 8001298:	2001      	movs	r0, #1
 800129a:	f7ff ff05 	bl	80010a8 <CommHandlerInit>

		MTIM2_voidSetBusyWait(1000);
 800129e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a2:	f7ff f941 	bl	8000528 <MTIM2_voidSetBusyWait>

		CommHandlerInit( ECU_RECIEVE );
 80012a6:	2002      	movs	r0, #2
 80012a8:	f7ff fefe 	bl	80010a8 <CommHandlerInit>

		//		First_Distance = CommHandlerRxIndication();
		//		MTIM2_voidSetBusyWait( 100 );
		//		Second_Distance = CommHandlerRxIndication();

		First_Distance = CommHandlerRxIndication();
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff ff0f 	bl	80010d4 <CommHandlerRxIndication>


		USART_voidTransmitByteSynch( 'D'   , USART1 );
 80012b6:	2100      	movs	r1, #0
 80012b8:	2044      	movs	r0, #68	; 0x44
 80012ba:	f7ff fc61 	bl	8000b80 <USART_voidTransmitByteSynch>
		USART_voidTransmitByteSynch( ':'   , USART1 );
 80012be:	2100      	movs	r1, #0
 80012c0:	203a      	movs	r0, #58	; 0x3a
 80012c2:	f7ff fc5d 	bl	8000b80 <USART_voidTransmitByteSynch>
		USART_voidSendNumber( First_Distance.Data , USART1 );
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fc84 	bl	8000bd8 <USART_voidSendNumber>
		USART_voidTransmitByteSynch( '\r'  , USART1 );
 80012d0:	2100      	movs	r1, #0
 80012d2:	200d      	movs	r0, #13
 80012d4:	f7ff fc54 	bl	8000b80 <USART_voidTransmitByteSynch>
		USART_voidTransmitByteSynch( '\n'  , USART1 );
 80012d8:	2100      	movs	r1, #0
 80012da:	200a      	movs	r0, #10
 80012dc:	f7ff fc50 	bl	8000b80 <USART_voidTransmitByteSynch>

		USART_voidTransmitByteSynch( 'T'       , USART1 );
 80012e0:	2100      	movs	r1, #0
 80012e2:	2054      	movs	r0, #84	; 0x54
 80012e4:	f7ff fc4c 	bl	8000b80 <USART_voidTransmitByteSynch>
		USART_voidTransmitByteSynch( ':'       , USART1 );
 80012e8:	2100      	movs	r1, #0
 80012ea:	203a      	movs	r0, #58	; 0x3a
 80012ec:	f7ff fc48 	bl	8000b80 <USART_voidTransmitByteSynch>
		USART_voidSendNumber( First_Distance.DataType , USART1 );
 80012f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fc6e 	bl	8000bd8 <USART_voidSendNumber>
		USART_voidTransmitByteSynch( '\r'      , USART1 );
 80012fc:	2100      	movs	r1, #0
 80012fe:	200d      	movs	r0, #13
 8001300:	f7ff fc3e 	bl	8000b80 <USART_voidTransmitByteSynch>
		USART_voidTransmitByteSynch( '\n'      , USART1 );
 8001304:	2100      	movs	r1, #0
 8001306:	200a      	movs	r0, #10
 8001308:	f7ff fc3a 	bl	8000b80 <USART_voidTransmitByteSynch>

		MTIM2_voidSetBusyWait(1000);
 800130c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001310:	f7ff f90a 	bl	8000528 <MTIM2_voidSetBusyWait>
		CommHandlerInit( ECU_TRANSMIT );
 8001314:	e7c0      	b.n	8001298 <main+0x7c>
 8001316:	bf00      	nop
 8001318:	080013dc 	.word	0x080013dc
 800131c:	080013e8 	.word	0x080013e8

08001320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001320:	480d      	ldr	r0, [pc, #52]	; (8001358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001322:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001324:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <LoopForever+0x6>)
  ldr r1, =_edata
 800132a:	490d      	ldr	r1, [pc, #52]	; (8001360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800132c:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <LoopForever+0xe>)
  movs r3, #0
 800132e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001330:	e002      	b.n	8001338 <LoopCopyDataInit>

08001332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001336:	3304      	adds	r3, #4

08001338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800133a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800133c:	d3f9      	bcc.n	8001332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001340:	4c0a      	ldr	r4, [pc, #40]	; (800136c <LoopForever+0x16>)
  movs r3, #0
 8001342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001344:	e001      	b.n	800134a <LoopFillZerobss>

08001346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001348:	3204      	adds	r2, #4

0800134a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800134a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800134c:	d3fb      	bcc.n	8001346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800134e:	f000 f811 	bl	8001374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001352:	f7ff ff63 	bl	800121c <main>

08001356 <LoopForever>:

LoopForever:
    b LoopForever
 8001356:	e7fe      	b.n	8001356 <LoopForever>
  ldr   r0, =_estack
 8001358:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800135c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001360:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001364:	0800140c 	.word	0x0800140c
  ldr r2, =_sbss
 8001368:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800136c:	20000084 	.word	0x20000084

08001370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001370:	e7fe      	b.n	8001370 <ADC1_2_IRQHandler>
	...

08001374 <__libc_init_array>:
 8001374:	b570      	push	{r4, r5, r6, lr}
 8001376:	2600      	movs	r6, #0
 8001378:	4d0c      	ldr	r5, [pc, #48]	; (80013ac <__libc_init_array+0x38>)
 800137a:	4c0d      	ldr	r4, [pc, #52]	; (80013b0 <__libc_init_array+0x3c>)
 800137c:	1b64      	subs	r4, r4, r5
 800137e:	10a4      	asrs	r4, r4, #2
 8001380:	42a6      	cmp	r6, r4
 8001382:	d109      	bne.n	8001398 <__libc_init_array+0x24>
 8001384:	f000 f81a 	bl	80013bc <_init>
 8001388:	2600      	movs	r6, #0
 800138a:	4d0a      	ldr	r5, [pc, #40]	; (80013b4 <__libc_init_array+0x40>)
 800138c:	4c0a      	ldr	r4, [pc, #40]	; (80013b8 <__libc_init_array+0x44>)
 800138e:	1b64      	subs	r4, r4, r5
 8001390:	10a4      	asrs	r4, r4, #2
 8001392:	42a6      	cmp	r6, r4
 8001394:	d105      	bne.n	80013a2 <__libc_init_array+0x2e>
 8001396:	bd70      	pop	{r4, r5, r6, pc}
 8001398:	f855 3b04 	ldr.w	r3, [r5], #4
 800139c:	4798      	blx	r3
 800139e:	3601      	adds	r6, #1
 80013a0:	e7ee      	b.n	8001380 <__libc_init_array+0xc>
 80013a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80013a6:	4798      	blx	r3
 80013a8:	3601      	adds	r6, #1
 80013aa:	e7f2      	b.n	8001392 <__libc_init_array+0x1e>
 80013ac:	08001404 	.word	0x08001404
 80013b0:	08001404 	.word	0x08001404
 80013b4:	08001404 	.word	0x08001404
 80013b8:	08001408 	.word	0x08001408

080013bc <_init>:
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	bf00      	nop
 80013c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c2:	bc08      	pop	{r3}
 80013c4:	469e      	mov	lr, r3
 80013c6:	4770      	bx	lr

080013c8 <_fini>:
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ca:	bf00      	nop
 80013cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ce:	bc08      	pop	{r3}
 80013d0:	469e      	mov	lr, r3
 80013d2:	4770      	bx	lr
