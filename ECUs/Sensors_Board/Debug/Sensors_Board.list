
Sensors_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001df0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001f20  08001f20  00011f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f4c  08001f4c  00011f54  2**0
                  CONTENTS
  4 .ARM          00000000  08001f4c  08001f4c  00011f54  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f4c  08001f54  00011f54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f4c  08001f4c  00011f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f50  08001f50  00011f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011f54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000000  08001f54  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08001f54  00020084  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011f54  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002f77  00000000  00000000  00011f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f36  00000000  00000000  00014ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c8  00000000  00000000  00015e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003f0  00000000  00000000  000162f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001067  00000000  00000000  000166e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002bfc  00000000  00000000  0001774f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00008355  00000000  00000000  0001a34b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000226a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000108c  00000000  00000000  000226f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001f08 	.word	0x08001f08

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001f08 	.word	0x08001f08

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__aeabi_f2uiz>:
 800062c:	0042      	lsls	r2, r0, #1
 800062e:	d20e      	bcs.n	800064e <__aeabi_f2uiz+0x22>
 8000630:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000634:	d30b      	bcc.n	800064e <__aeabi_f2uiz+0x22>
 8000636:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800063a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800063e:	d409      	bmi.n	8000654 <__aeabi_f2uiz+0x28>
 8000640:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000644:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000648:	fa23 f002 	lsr.w	r0, r3, r2
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr
 8000654:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000658:	d101      	bne.n	800065e <__aeabi_f2uiz+0x32>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	d102      	bne.n	8000664 <__aeabi_f2uiz+0x38>
 800065e:	f04f 30ff 	mov.w	r0, #4294967295
 8000662:	4770      	bx	lr
 8000664:	f04f 0000 	mov.w	r0, #0
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop

0800066c <RCC_voidInitSysClock>:
#include "../00-RCC/RCC_private.h"
#include "../00-RCC/RCC_register.h"


void RCC_voidInitSysClock(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
	/*Turn ON HSI with no trimming*/
	RCC->CR = 0x00000081;

#elif SYSTEM_CLK == SYS_CLK_HSE_CRYSTAL
	/*Selecting HSE as system clock without choosing prescaler*/
	RCC->CFGR = 1;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <RCC_voidInitSysClock+0x24>)
 8000672:	2201      	movs	r2, #1
 8000674:	605a      	str	r2, [r3, #4]

	/*Selecting HSE with no bypass and trimming*/
	RCC->CR = 0x00010080;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <RCC_voidInitSysClock+0x24>)
 8000678:	4a06      	ldr	r2, [pc, #24]	; (8000694 <RCC_voidInitSysClock+0x28>)
 800067a:	601a      	str	r2, [r3, #0]

	/*Selecting Clock security system*/
#if RCC_CSS_ENABLE == ENABLE
	SET_BIT(RCC->CR,RCC_CR_CSSON);
#elif RCC_CSS_ENABLE == DISABLE
	CLR_BIT(RCC->CR,RCC_CR_CSSON);
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <RCC_voidInitSysClock+0x24>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a03      	ldr	r2, [pc, #12]	; (8000690 <RCC_voidInitSysClock+0x24>)
 8000682:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000686:	6013      	str	r3, [r2, #0]
#endif

}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	bc80      	pop	{r7}
 800068e:	4770      	bx	lr
 8000690:	40021000 	.word	0x40021000
 8000694:	00010080 	.word	0x00010080

08000698 <RCC_voidEnableClock>:


u8 RCC_voidEnableClock(u8 Copy_u8PeripheralID,u8 Copy_u8BusId)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
	u8 Local_u8ErrorState = OK;
 80006a8:	2301      	movs	r3, #1
 80006aa:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8PeripheralID <= 31)
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	2b1f      	cmp	r3, #31
 80006b0:	d82a      	bhi.n	8000708 <RCC_voidEnableClock+0x70>
	{
		switch (Copy_u8BusId)
 80006b2:	79bb      	ldrb	r3, [r7, #6]
 80006b4:	2b02      	cmp	r3, #2
 80006b6:	d01a      	beq.n	80006ee <RCC_voidEnableClock+0x56>
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	dc22      	bgt.n	8000702 <RCC_voidEnableClock+0x6a>
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <RCC_voidEnableClock+0x2e>
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d00a      	beq.n	80006da <RCC_voidEnableClock+0x42>
 80006c4:	e01d      	b.n	8000702 <RCC_voidEnableClock+0x6a>
		{
		case RCC_AHB:  SET_BIT(RCC->AHBENR,	Copy_u8PeripheralID); break;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <RCC_voidEnableClock+0x80>)
 80006c8:	695a      	ldr	r2, [r3, #20]
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	2101      	movs	r1, #1
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	4911      	ldr	r1, [pc, #68]	; (8000718 <RCC_voidEnableClock+0x80>)
 80006d4:	4313      	orrs	r3, r2
 80006d6:	614b      	str	r3, [r1, #20]
 80006d8:	e018      	b.n	800070c <RCC_voidEnableClock+0x74>
		case RCC_APB1: SET_BIT(RCC->APB1ENR,Copy_u8PeripheralID); break;
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <RCC_voidEnableClock+0x80>)
 80006dc:	69da      	ldr	r2, [r3, #28]
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	2101      	movs	r1, #1
 80006e2:	fa01 f303 	lsl.w	r3, r1, r3
 80006e6:	490c      	ldr	r1, [pc, #48]	; (8000718 <RCC_voidEnableClock+0x80>)
 80006e8:	4313      	orrs	r3, r2
 80006ea:	61cb      	str	r3, [r1, #28]
 80006ec:	e00e      	b.n	800070c <RCC_voidEnableClock+0x74>
		case RCC_APB2: SET_BIT(RCC->APB2ENR,Copy_u8PeripheralID); break;
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <RCC_voidEnableClock+0x80>)
 80006f0:	699a      	ldr	r2, [r3, #24]
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f303 	lsl.w	r3, r1, r3
 80006fa:	4907      	ldr	r1, [pc, #28]	; (8000718 <RCC_voidEnableClock+0x80>)
 80006fc:	4313      	orrs	r3, r2
 80006fe:	618b      	str	r3, [r1, #24]
 8000700:	e004      	b.n	800070c <RCC_voidEnableClock+0x74>
		default: 	   Local_u8ErrorState = NOK; break;
 8000702:	2302      	movs	r3, #2
 8000704:	73fb      	strb	r3, [r7, #15]
 8000706:	e001      	b.n	800070c <RCC_voidEnableClock+0x74>
		}
	}
	else
	{
		Local_u8ErrorState = NOK;
 8000708:	2302      	movs	r3, #2
 800070a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_u8ErrorState;
 800070c:	7bfb      	ldrb	r3, [r7, #15]
}
 800070e:	4618      	mov	r0, r3
 8000710:	3714      	adds	r7, #20
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	40021000 	.word	0x40021000

0800071c <PORT_voidInit>:
 * Type        : Synchronous & Non Reentrant                                *
 *                                                                          *
 * description : Initiate all Pins of the Microcontroller                   *
 ****************************************************************************/
void PORT_voidInit( void )
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
	/* --> set the mode for all ports */

	/* port A */
	GPIOA->CRL = PORTA_LOW_MODE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <PORT_voidInit+0x44>)
 8000722:	4a10      	ldr	r2, [pc, #64]	; (8000764 <PORT_voidInit+0x48>)
 8000724:	601a      	str	r2, [r3, #0]
	GPIOA->CRH = PORTA_HIGH_MODE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <PORT_voidInit+0x44>)
 8000728:	4a0f      	ldr	r2, [pc, #60]	; (8000768 <PORT_voidInit+0x4c>)
 800072a:	605a      	str	r2, [r3, #4]

	/* port B */
	GPIOB->CRL = PORTB_LOW_MODE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <PORT_voidInit+0x50>)
 800072e:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8000732:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = PORTB_HIGH_MODE;
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <PORT_voidInit+0x50>)
 8000736:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 800073a:	605a      	str	r2, [r3, #4]

	/* port C */
	GPIOC->CRH = PORTC_HIGH_MODE;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <PORT_voidInit+0x54>)
 800073e:	f04f 3244 	mov.w	r2, #1145324612	; 0x44444444
 8000742:	605a      	str	r2, [r3, #4]

	/* --> set initial value for all ports */

	/* port A */
	GPIOA->ODR = PORTA_INITIAL_VALUE;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <PORT_voidInit+0x44>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]

	/* port B */
	GPIOB->ODR = PORTB_INITIAL_VALUE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <PORT_voidInit+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]

	/* port C */
	GPIOC->ODR = PORTC_INITIAL_VALUE;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <PORT_voidInit+0x54>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
}
 8000756:	bf00      	nop
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40010800 	.word	0x40010800
 8000764:	b4bb4414 	.word	0xb4bb4414
 8000768:	444444b4 	.word	0x444444b4
 800076c:	40010c00 	.word	0x40010c00
 8000770:	40011000 	.word	0x40011000

08000774 <MDIO_u8WriteChannel>:
#include "../02-DIO/DIO_private.h"
#include "../02-DIO/DIO_interface.h"

/* WriteChannel is used to set pin to High or Low */
u8 MDIO_u8WriteChannel(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	71fb      	strb	r3, [r7, #7]
 800077e:	460b      	mov	r3, r1
 8000780:	71bb      	strb	r3, [r7, #6]
 8000782:	4613      	mov	r3, r2
 8000784:	717b      	strb	r3, [r7, #5]
	u8 Local_u8ErrorStatus=OK;
 8000786:	2301      	movs	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8Pin >15)
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	2b0f      	cmp	r3, #15
 800078e:	d902      	bls.n	8000796 <MDIO_u8WriteChannel+0x22>
	{
		Local_u8ErrorStatus=NOK;
 8000790:	2302      	movs	r3, #2
 8000792:	73fb      	strb	r3, [r7, #15]
 8000794:	e046      	b.n	8000824 <MDIO_u8WriteChannel+0xb0>
	}
	else
	{
		switch(Copy_u8Port)
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b03      	cmp	r3, #3
 800079a:	d02a      	beq.n	80007f2 <MDIO_u8WriteChannel+0x7e>
 800079c:	2b03      	cmp	r3, #3
 800079e:	dc3a      	bgt.n	8000816 <MDIO_u8WriteChannel+0xa2>
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d002      	beq.n	80007aa <MDIO_u8WriteChannel+0x36>
 80007a4:	2b02      	cmp	r3, #2
 80007a6:	d012      	beq.n	80007ce <MDIO_u8WriteChannel+0x5a>
			{
				//CLR_BIT(MDIOC_ODR,Copy_u8Pin);
				MDIOC->BRR=(1<<Copy_u8Pin);
			}
			break;
		default: break;
 80007a8:	e035      	b.n	8000816 <MDIO_u8WriteChannel+0xa2>
			if(Copy_u8Value==MDIO_PIN_HIGH)
 80007aa:	797b      	ldrb	r3, [r7, #5]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d105      	bne.n	80007bc <MDIO_u8WriteChannel+0x48>
				MDIOA->BSRR=(1<<Copy_u8Pin);
 80007b0:	79bb      	ldrb	r3, [r7, #6]
 80007b2:	2201      	movs	r2, #1
 80007b4:	409a      	lsls	r2, r3
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MDIO_u8WriteChannel+0xbc>)
 80007b8:	611a      	str	r2, [r3, #16]
			break;
 80007ba:	e02e      	b.n	800081a <MDIO_u8WriteChannel+0xa6>
			else if(Copy_u8Value==MDIO_PIN_LOW)
 80007bc:	797b      	ldrb	r3, [r7, #5]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d12b      	bne.n	800081a <MDIO_u8WriteChannel+0xa6>
				MDIOA -> BRR=(1<<Copy_u8Pin);
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	2201      	movs	r2, #1
 80007c6:	409a      	lsls	r2, r3
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MDIO_u8WriteChannel+0xbc>)
 80007ca:	615a      	str	r2, [r3, #20]
			break;
 80007cc:	e025      	b.n	800081a <MDIO_u8WriteChannel+0xa6>
			if(Copy_u8Value==MDIO_PIN_HIGH)
 80007ce:	797b      	ldrb	r3, [r7, #5]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d105      	bne.n	80007e0 <MDIO_u8WriteChannel+0x6c>
				MDIOB -> BSRR=(1<<Copy_u8Pin);
 80007d4:	79bb      	ldrb	r3, [r7, #6]
 80007d6:	2201      	movs	r2, #1
 80007d8:	409a      	lsls	r2, r3
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MDIO_u8WriteChannel+0xc0>)
 80007dc:	611a      	str	r2, [r3, #16]
			break;
 80007de:	e01e      	b.n	800081e <MDIO_u8WriteChannel+0xaa>
			else if(Copy_u8Value==MDIO_PIN_LOW)
 80007e0:	797b      	ldrb	r3, [r7, #5]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d11b      	bne.n	800081e <MDIO_u8WriteChannel+0xaa>
				MDIOB->BRR=(1<<Copy_u8Pin);
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	2201      	movs	r2, #1
 80007ea:	409a      	lsls	r2, r3
 80007ec:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MDIO_u8WriteChannel+0xc0>)
 80007ee:	615a      	str	r2, [r3, #20]
			break;
 80007f0:	e015      	b.n	800081e <MDIO_u8WriteChannel+0xaa>
			if(Copy_u8Value==MDIO_PIN_HIGH)
 80007f2:	797b      	ldrb	r3, [r7, #5]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d105      	bne.n	8000804 <MDIO_u8WriteChannel+0x90>
				MDIOC->BSRR=(1<<Copy_u8Pin);
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	2201      	movs	r2, #1
 80007fc:	409a      	lsls	r2, r3
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MDIO_u8WriteChannel+0xc4>)
 8000800:	611a      	str	r2, [r3, #16]
			break;
 8000802:	e00e      	b.n	8000822 <MDIO_u8WriteChannel+0xae>
			else if(Copy_u8Value==MDIO_PIN_LOW)
 8000804:	797b      	ldrb	r3, [r7, #5]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d10b      	bne.n	8000822 <MDIO_u8WriteChannel+0xae>
				MDIOC->BRR=(1<<Copy_u8Pin);
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	2201      	movs	r2, #1
 800080e:	409a      	lsls	r2, r3
 8000810:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MDIO_u8WriteChannel+0xc4>)
 8000812:	615a      	str	r2, [r3, #20]
			break;
 8000814:	e005      	b.n	8000822 <MDIO_u8WriteChannel+0xae>
		default: break;
 8000816:	bf00      	nop
 8000818:	e004      	b.n	8000824 <MDIO_u8WriteChannel+0xb0>
			break;
 800081a:	bf00      	nop
 800081c:	e002      	b.n	8000824 <MDIO_u8WriteChannel+0xb0>
			break;
 800081e:	bf00      	nop
 8000820:	e000      	b.n	8000824 <MDIO_u8WriteChannel+0xb0>
			break;
 8000822:	bf00      	nop
		}
	}
	return Local_u8ErrorStatus;
 8000824:	7bfb      	ldrb	r3, [r7, #15]
}
 8000826:	4618      	mov	r0, r3
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr
 8000830:	40010800 	.word	0x40010800
 8000834:	40010c00 	.word	0x40010c00
 8000838:	40011000 	.word	0x40011000

0800083c <MSTK_voidClearCount>:
#elif STK_CLK_SRC == AHB
	SET_BIT(MSTK->MSTK_CTRL,MSTK_CLK_SRC);
#endif
}
u8 MSTK_voidClearCount(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
	u8 Local_u8CountFlag;
	Local_u8CountFlag=GET_BIT(MSTK->MSTK_CTRL,MSTK_CNT_FLAG); /*clearing counter flag by reading it when it reaches overflow*/
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MSTK_voidClearCount+0x20>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	0c1b      	lsrs	r3, r3, #16
 8000848:	b2db      	uxtb	r3, r3
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	71fb      	strb	r3, [r7, #7]
	return Local_u8CountFlag;
 8000850:	79fb      	ldrb	r3, [r7, #7]
}
 8000852:	4618      	mov	r0, r3
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	e000e010 	.word	0xe000e010

08000860 <MSTK_voidSetBusyWait>:
void MSTK_voidSetBusyWait(u32 Copy_u32Ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	/*Clear Value register */
	MSTK ->MSTK_VAL =0x00;
 8000868:	4b0b      	ldr	r3, [pc, #44]	; (8000898 <MSTK_voidSetBusyWait+0x38>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
	/*Set Load register to number of ticks*/
	MSTK ->MSTK_LOAD =Copy_u32Ticks;
 800086e:	4a0a      	ldr	r2, [pc, #40]	; (8000898 <MSTK_voidSetBusyWait+0x38>)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6053      	str	r3, [r2, #4]
	/*Enable STK peripheral*/
	SET_BIT(MSTK->MSTK_CTRL,MSTK_ENABLE);
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <MSTK_voidSetBusyWait+0x38>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a07      	ldr	r2, [pc, #28]	; (8000898 <MSTK_voidSetBusyWait+0x38>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]
	/*Busy wait until the count down flag is raised */
	while(MSTK_voidClearCount()==0);
 8000880:	bf00      	nop
 8000882:	f7ff ffdb 	bl	800083c <MSTK_voidClearCount>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d0fa      	beq.n	8000882 <MSTK_voidSetBusyWait+0x22>
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	e000e010 	.word	0xe000e010

0800089c <MSTK_voidStopInterval>:
	SET_BIT(MSTK->MSTK_CTRL,MSTK_ENABLE);
	MSTK_u8ModeOfinterval=MSTK_PERIODIC_INTERVAL;
}

void MSTK_voidStopInterval(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
	/*Disable the STK peripheral*/
	CLR_BIT(MSTK->MSTK_CTRL,MSTK_ENABLE);
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <MSTK_voidStopInterval+0x24>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a06      	ldr	r2, [pc, #24]	; (80008c0 <MSTK_voidStopInterval+0x24>)
 80008a6:	f023 0301 	bic.w	r3, r3, #1
 80008aa:	6013      	str	r3, [r2, #0]
	/*Clearing load Register*/
	MSTK->MSTK_LOAD=0x00;
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <MSTK_voidStopInterval+0x24>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
	/*Clearing value Register*/
	MSTK->MSTK_VAL=0x00;
 80008b2:	4b03      	ldr	r3, [pc, #12]	; (80008c0 <MSTK_voidStopInterval+0x24>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	e000e010 	.word	0xe000e010

080008c4 <SysTick_Handler>:
		Global_voidPtrCallbackFunc=Copy_ptrFunc;
	}
	return Local_u8ErrorStatus;
}
void SysTick_Handler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	if(Global_voidPtrCallbackFunc!=NULL)
 80008c8:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <SysTick_Handler+0x30>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d00e      	beq.n	80008ee <SysTick_Handler+0x2a>
	{
		if(MSTK_u8ModeOfinterval==MSTK_SINGLE_INTERVAL)
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <SysTick_Handler+0x34>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d107      	bne.n	80008e8 <SysTick_Handler+0x24>
		{
			/*Clear load and value registers*/
			MSTK_voidStopInterval();
 80008d8:	f7ff ffe0 	bl	800089c <MSTK_voidStopInterval>
			/*Disable the interrupt*/
			CLR_BIT(MSTK->MSTK_CTRL,MSTK_TICKINT_EN);
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <SysTick_Handler+0x38>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a06      	ldr	r2, [pc, #24]	; (80008fc <SysTick_Handler+0x38>)
 80008e2:	f023 0302 	bic.w	r3, r3, #2
 80008e6:	6013      	str	r3, [r2, #0]
		}
		Global_voidPtrCallbackFunc();
 80008e8:	4b02      	ldr	r3, [pc, #8]	; (80008f4 <SysTick_Handler+0x30>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4798      	blx	r3
	}
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	2000001c 	.word	0x2000001c
 80008f8:	20000020 	.word	0x20000020
 80008fc:	e000e010 	.word	0xe000e010

08000900 <EXTI0_IRQHandler>:

	return Local_u8ErrorState;
}

void EXTI0_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE0] != NULL)
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <EXTI0_IRQHandler+0x24>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d008      	beq.n	800091e <EXTI0_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE0]();
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <EXTI0_IRQHandler+0x24>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE0);
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <EXTI0_IRQHandler+0x28>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a04      	ldr	r2, [pc, #16]	; (8000928 <EXTI0_IRQHandler+0x28>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000024 	.word	0x20000024
 8000928:	40010400 	.word	0x40010400

0800092c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE1] != NULL)
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <EXTI1_IRQHandler+0x24>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d008      	beq.n	800094a <EXTI1_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE1]();
 8000938:	4b05      	ldr	r3, [pc, #20]	; (8000950 <EXTI1_IRQHandler+0x24>)
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE1);
 800093e:	4b05      	ldr	r3, [pc, #20]	; (8000954 <EXTI1_IRQHandler+0x28>)
 8000940:	695b      	ldr	r3, [r3, #20]
 8000942:	4a04      	ldr	r2, [pc, #16]	; (8000954 <EXTI1_IRQHandler+0x28>)
 8000944:	f043 0302 	orr.w	r3, r3, #2
 8000948:	6153      	str	r3, [r2, #20]
	else
	{
		/*Do Nothing*/
	}

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000024 	.word	0x20000024
 8000954:	40010400 	.word	0x40010400

08000958 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE2] != NULL)
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <EXTI2_IRQHandler+0x24>)
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d008      	beq.n	8000976 <EXTI2_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE2]();
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <EXTI2_IRQHandler+0x24>)
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE2);
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <EXTI2_IRQHandler+0x28>)
 800096c:	695b      	ldr	r3, [r3, #20]
 800096e:	4a04      	ldr	r2, [pc, #16]	; (8000980 <EXTI2_IRQHandler+0x28>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000024 	.word	0x20000024
 8000980:	40010400 	.word	0x40010400

08000984 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE3] != NULL)
 8000988:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <EXTI3_IRQHandler+0x24>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d008      	beq.n	80009a2 <EXTI3_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE3]();
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <EXTI3_IRQHandler+0x24>)
 8000992:	68db      	ldr	r3, [r3, #12]
 8000994:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE3);
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <EXTI3_IRQHandler+0x28>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <EXTI3_IRQHandler+0x28>)
 800099c:	f043 0308 	orr.w	r3, r3, #8
 80009a0:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000024 	.word	0x20000024
 80009ac:	40010400 	.word	0x40010400

080009b0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	if(Global_pvEXTICallBackFunc[MEXTI_LINE4] != NULL)
 80009b4:	4b07      	ldr	r3, [pc, #28]	; (80009d4 <EXTI4_IRQHandler+0x24>)
 80009b6:	691b      	ldr	r3, [r3, #16]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d008      	beq.n	80009ce <EXTI4_IRQHandler+0x1e>
	{
		/*Calling the Call back function*/
		Global_pvEXTICallBackFunc[MEXTI_LINE4]();
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <EXTI4_IRQHandler+0x24>)
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	4798      	blx	r3

		/*Clearing Pending bit*/
		SET_BIT(EXTI->PR,MEXTI_LINE4);
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <EXTI4_IRQHandler+0x28>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <EXTI4_IRQHandler+0x28>)
 80009c8:	f043 0310 	orr.w	r3, r3, #16
 80009cc:	6153      	str	r3, [r2, #20]
	}
	else
	{
		/*Do Nothing*/
	}
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000024 	.word	0x20000024
 80009d8:	40010400 	.word	0x40010400

080009dc <MTIM2_voidInit>:
u8 Global_u8FlagTIM4=DISABLED;


/*Timer 2 Initialization */
void  MTIM2_voidInit(void)
{ 
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

	/* Set the Request Event Source*/
#if TIM2_UPDATE_REQUEST_SOURCE ==	ALL_SOURCES
	CLR_BIT(TIM2->CR1,TIM_CR1_URS);
 80009e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ea:	f023 0304 	bic.w	r3, r3, #4
 80009ee:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIM2->CR1,TIM_CR1_URS);
#endif

	/* Set Center Align Mode */
#if TIM2_CENTER_ALIGNED_MODE ==	CENTER_ALIGN_MODE0
	CLR_BIT(TIM2->CR1,TIM_CR1_CMS1);
 80009f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009fa:	f023 0320 	bic.w	r3, r3, #32
 80009fe:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIM2->CR1,TIM_CR1_CMS2);
 8000a00:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a0e:	6013      	str	r3, [r2, #0]
	/*WE CAN ONLY SET A DIRECTION OF COUNTING AT MODE 0 !!*/
	/* SET DIRECTION OF COUNTING */
#if	TIM2_COUNTER_DIRECTION==UP_COUNTER
	CLR_BIT(TIM2->CR1,TIM_CR1_DIR);
 8000a10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1a:	f023 0310 	bic.w	r3, r3, #16
 8000a1e:	6013      	str	r3, [r2, #0]


#if TIM2_AUTO_RELOAD_PRELOAD == ARR_BUFFERED
	SET_BIT(TIM2->CR1,TIM_CR1_ARPE);
#else
	CLR_BIT(TIM2->CR1,TIM_CR1_ARPE);
 8000a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a2e:	6013      	str	r3, [r2, #0]
#endif

#if TIM2_CAPTURE_COMPARE_INTRUPT_STATUS ==ENABLED
	SET_BIT(TIM2->DIER,TIM_DIER_CC1IE);
#else
	CLR_BIT(TIM2->DIER,TIM_DIER_CC1IE);
 8000a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a3a:	f023 0302 	bic.w	r3, r3, #2
 8000a3e:	60d3      	str	r3, [r2, #12]
#endif

	/*Set the required Prescaler value*/
	/*the eqn:F=fCK_PSC / (PSC[15:0] + 1)*/
#if (TIM2_PRESCALE_VALUE>0 && TIM2_PRESCALE_VALUE<=65536)
	TIM2->PSC=TIM2_PRESCALE_VALUE-1;
 8000a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
#else
#error ("wrong prescale  ")
#endif
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <MTIM3_voidInit>:



/*Timer 3 Initialization */
void  MTIM3_voidInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
	/* Set the Request Event Source*/
#if TIM3_UPDATE_REQUEST_SOURCE ==	ALL_SOURCES
	CLR_BIT(TIM3->CR1,TIM_CR1_URS);
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a14      	ldr	r2, [pc, #80]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a5a:	f023 0304 	bic.w	r3, r3, #4
 8000a5e:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIM3->CR1,TIM_CR1_URS);
#endif

	/* Set Center Align Mode */
#if TIM3_CENTER_ALIGNED_MODE ==	CENTER_ALIGN_MODE0
	CLR_BIT(TIM3->CR1,TIM_CR1_CMS1);
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a11      	ldr	r2, [pc, #68]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a66:	f023 0320 	bic.w	r3, r3, #32
 8000a6a:	6013      	str	r3, [r2, #0]
	CLR_BIT(TIM3->CR1,TIM_CR1_CMS2);
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0e      	ldr	r2, [pc, #56]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a76:	6013      	str	r3, [r2, #0]
	/*WE CAN ONLY SET A DIRECTION OF COUNTING AT MODE 0 !!*/
	/* SET DIRECTION OF COUNTING */
#if	TIM3_COUNTER_DIRECTION==UP_COUNTER
	CLR_BIT(TIM3->CR1,TIM_CR1_DIR);
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a7e:	f023 0310 	bic.w	r3, r3, #16
 8000a82:	6013      	str	r3, [r2, #0]


#if TIM3_AUTO_RELOAD_PRELOAD == ARR_BUFFERED
	SET_BIT(TIM3->CR1,TIM_CR1_ARPE);
#else
	CLR_BIT(TIM3->CR1,TIM_CR1_ARPE);
 8000a84:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a08      	ldr	r2, [pc, #32]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a8e:	6013      	str	r3, [r2, #0]


#if TIM3_CAPTURE_COMPARE_INTRUPT_STATUS ==ENABLED
	SET_BIT(TIM3->DIER,TIM_DIER_CC1IE);
#else
	CLR_BIT(TIM3->DIER,TIM_DIER_CC1IE);
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	4a05      	ldr	r2, [pc, #20]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a96:	f023 0302 	bic.w	r3, r3, #2
 8000a9a:	60d3      	str	r3, [r2, #12]
#endif

	/*Set the required Prescaler value*/
	/*the eqn:F=fCK_PSC / (PSC[15:0] + 1)*/
#if (TIM3_PRESCALE_VALUE>0 && TIM3_PRESCALE_VALUE<=65536)
	TIM3->PSC=TIM3_PRESCALE_VALUE-1;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <MTIM3_voidInit+0x5c>)
 8000a9e:	f240 321f 	movw	r2, #799	; 0x31f
 8000aa2:	629a      	str	r2, [r3, #40]	; 0x28
#else
#error ("wrong prescale  ")
#endif
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	40000400 	.word	0x40000400

08000ab0 <MTIM2_voidStartCounter>:
}


/*Enable the counter to Timer 2 and down the flag to be able for another interrupt to enter the ISR*/
void MTIM2_voidStartCounter(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	Global_u8FlagTIM2=DISABLED;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <MTIM2_voidStartCounter+0x24>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
	SET_BIT(TIM2->CR1,TIM_CR1_CEN);
 8000aba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6013      	str	r3, [r2, #0]
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000070 	.word	0x20000070

08000ad8 <MTIM3_voidStartCounter>:


/*Enable the counter to Timer 3 and down the flag to be able for another interrupt to enter the ISR*/
void MTIM3_voidStartCounter(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
	Global_u8FlagTIM3=DISABLED;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <MTIM3_voidStartCounter+0x20>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
	SET_BIT(TIM3->CR1,TIM_CR1_CEN);
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MTIM3_voidStartCounter+0x24>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <MTIM3_voidStartCounter+0x24>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6013      	str	r3, [r2, #0]
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000071 	.word	0x20000071
 8000afc:	40000400 	.word	0x40000400

08000b00 <MTIM4_voidStartCounter>:

/*Enable the counter to Timer 4 and down the flag to be able for another interrupt to enter the ISR*/
void MTIM4_voidStartCounter(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
	Global_u8FlagTIM4=DISABLED;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MTIM4_voidStartCounter+0x20>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	701a      	strb	r2, [r3, #0]
	SET_BIT(TIM4->CR1,TIM_CR1_CEN);
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <MTIM4_voidStartCounter+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a05      	ldr	r2, [pc, #20]	; (8000b24 <MTIM4_voidStartCounter+0x24>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6013      	str	r3, [r2, #0]
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000072 	.word	0x20000072
 8000b24:	40000800 	.word	0x40000800

08000b28 <MTIM3_u16GetRemainingTime>:
}


/*Calculating The Remaining Time for Timer 3*/
u16 MTIM3_u16GetRemainingTime(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	return (TIM3->CNT);
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <MTIM3_u16GetRemainingTime+0x14>)
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b30:	b29b      	uxth	r3, r3
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40000400 	.word	0x40000400

08000b40 <MTIM2_voidConfigICU>:
}


/* TIMER 2 ICU */
void MTIM2_voidConfigICU(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	/* SLECET CHANNEL 1 TI1*/
	CLR_BIT(TIM2->CR2,TIM_CR2_TI1S);
 8000b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000b52:	6053      	str	r3, [r2, #4]

	/* USE CHANNEL 1 AS INPUT*/
	SET_BIT(TIM2->CCMR1,TIM_CCMR1_CC1S0);
 8000b54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6193      	str	r3, [r2, #24]
	CLR_BIT(TIM2->CCMR1,TIM_CCMR1_CC1S1);
 8000b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b6e:	f023 0302 	bic.w	r3, r3, #2
 8000b72:	6193      	str	r3, [r2, #24]
	/* SELECT RISING EDGE AS ACTIVE POLARITY*/
	CLR_BIT(TIM2->CCER,TIM_CCER_CC1P);
 8000b74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b78:	6a1b      	ldr	r3, [r3, #32]
 8000b7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b7e:	f023 0302 	bic.w	r3, r3, #2
 8000b82:	6213      	str	r3, [r2, #32]

	/* SELECT CHANNEL 2 INPUT*/
	CLR_BIT(TIM2->CCMR1,TIM_CCMR1_CC2S0);
 8000b84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b92:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM2->CCMR1,TIM_CCMR1_CC2S1);
 8000b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba2:	6193      	str	r3, [r2, #24]

	/* SELECT FALLING EDGE AS ACTIVE POLARITY*/
	SET_BIT(TIM2->CCER,TIM_CCER_CC2P);
 8000ba4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ba8:	6a1b      	ldr	r3, [r3, #32]
 8000baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bae:	f043 0320 	orr.w	r3, r3, #32
 8000bb2:	6213      	str	r3, [r2, #32]

	/* FILTER TIMER INPUT 1*/
	SET_BIT(TIM2->SMCR,TIM_SMCR_TS0);
 8000bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bbe:	f043 0310 	orr.w	r3, r3, #16
 8000bc2:	6093      	str	r3, [r2, #8]
	CLR_BIT(TIM2->SMCR,TIM_SMCR_TS1);
 8000bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bc8:	689b      	ldr	r3, [r3, #8]
 8000bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bce:	f023 0320 	bic.w	r3, r3, #32
 8000bd2:	6093      	str	r3, [r2, #8]
	SET_BIT(TIM2->SMCR,TIM_SMCR_TS2);
 8000bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be2:	6093      	str	r3, [r2, #8]

	/* CONFIGURE SLAVE MODE IN RESET MODE*/
	CLR_BIT(TIM2->SMCR,TIM_SMCR_SMS0);
 8000be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bee:	f023 0301 	bic.w	r3, r3, #1
 8000bf2:	6093      	str	r3, [r2, #8]
	CLR_BIT(TIM2->SMCR,TIM_SMCR_SMS1);
 8000bf4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfe:	f023 0302 	bic.w	r3, r3, #2
 8000c02:	6093      	str	r3, [r2, #8]
	SET_BIT(TIM2->SMCR,TIM_SMCR_SMS2);
 8000c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	6093      	str	r3, [r2, #8]


	/* ENABLE CAPTURES OR 2 CHANNELS*/
	SET_BIT(TIM2->CCER,TIM_CCER_CC1E);
 8000c14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c18:	6a1b      	ldr	r3, [r3, #32]
 8000c1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c1e:	f043 0301 	orr.w	r3, r3, #1
 8000c22:	6213      	str	r3, [r2, #32]
	SET_BIT(TIM2->CCER,TIM_CCER_CC2E);
 8000c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c28:	6a1b      	ldr	r3, [r3, #32]
 8000c2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2e:	f043 0310 	orr.w	r3, r3, #16
 8000c32:	6213      	str	r3, [r2, #32]

	MTIM2_voidStartCounter();
 8000c34:	f7ff ff3c 	bl	8000ab0 <MTIM2_voidStartCounter>
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <MTIM3_voidConfigICU>:


/* TIMER 3 ICU */
void MTIM3_voidConfigICU(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	/* SLECET CHANNEL 1 TI1*/
	CLR_BIT(TIM3->CR2,TIM_CR2_TI1S);
 8000c40:	4b2e      	ldr	r3, [pc, #184]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	4a2d      	ldr	r2, [pc, #180]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c4a:	6053      	str	r3, [r2, #4]

	/* USE CHANNEL 1 AS INPUT*/
	SET_BIT(TIM3->CCMR1,TIM_CCMR1_CC1S0);
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	4a2a      	ldr	r2, [pc, #168]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c52:	f043 0301 	orr.w	r3, r3, #1
 8000c56:	6193      	str	r3, [r2, #24]
	CLR_BIT(TIM3->CCMR1,TIM_CCMR1_CC1S1);
 8000c58:	4b28      	ldr	r3, [pc, #160]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a27      	ldr	r2, [pc, #156]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c5e:	f023 0302 	bic.w	r3, r3, #2
 8000c62:	6193      	str	r3, [r2, #24]
	/* SELECT RISING EDGE AS ACTIVE POLARITY*/
	CLR_BIT(TIM3->CCER,TIM_CCER_CC1P);
 8000c64:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	4a24      	ldr	r2, [pc, #144]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c6a:	f023 0302 	bic.w	r3, r3, #2
 8000c6e:	6213      	str	r3, [r2, #32]

	/* SELECT CHANNEL 2 INPUT*/
	CLR_BIT(TIM3->CCMR1,TIM_CCMR1_CC2S0);
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a21      	ldr	r2, [pc, #132]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c7a:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM3->CCMR1,TIM_CCMR1_CC2S1);
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	4a1e      	ldr	r2, [pc, #120]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c86:	6193      	str	r3, [r2, #24]

	/* SELECT FALLING EDGE AS ACTIVE POLARITY*/
	SET_BIT(TIM3->CCER,TIM_CCER_CC2P);
 8000c88:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c8e:	f043 0320 	orr.w	r3, r3, #32
 8000c92:	6213      	str	r3, [r2, #32]

	/* FILTER TIMER INPUT 1*/
	SET_BIT(TIM3->SMCR,TIM_SMCR_TS0);
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	4a18      	ldr	r2, [pc, #96]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6093      	str	r3, [r2, #8]
	CLR_BIT(TIM3->SMCR,TIM_SMCR_TS1);
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000ca6:	f023 0320 	bic.w	r3, r3, #32
 8000caa:	6093      	str	r3, [r2, #8]
	SET_BIT(TIM3->SMCR,TIM_SMCR_TS2);
 8000cac:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000cae:	689b      	ldr	r3, [r3, #8]
 8000cb0:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cb6:	6093      	str	r3, [r2, #8]

	/* CONFIGURE SLAVE MODE IN RESET MODE*/
	CLR_BIT(TIM3->SMCR,TIM_SMCR_SMS0);
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000cbe:	f023 0301 	bic.w	r3, r3, #1
 8000cc2:	6093      	str	r3, [r2, #8]
	CLR_BIT(TIM3->SMCR,TIM_SMCR_SMS1);
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000cca:	f023 0302 	bic.w	r3, r3, #2
 8000cce:	6093      	str	r3, [r2, #8]
	SET_BIT(TIM3->SMCR,TIM_SMCR_SMS2);
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6093      	str	r3, [r2, #8]


	/* ENABLE CAPTURES OR 2 CHANNELS*/
	SET_BIT(TIM3->CCER,TIM_CCER_CC1E);
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000cde:	6a1b      	ldr	r3, [r3, #32]
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000ce2:	f043 0301 	orr.w	r3, r3, #1
 8000ce6:	6213      	str	r3, [r2, #32]
	SET_BIT(TIM3->CCER,TIM_CCER_CC2E);
 8000ce8:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000cea:	6a1b      	ldr	r3, [r3, #32]
 8000cec:	4a03      	ldr	r2, [pc, #12]	; (8000cfc <MTIM3_voidConfigICU+0xc0>)
 8000cee:	f043 0310 	orr.w	r3, r3, #16
 8000cf2:	6213      	str	r3, [r2, #32]

	MTIM3_voidStartCounter();
 8000cf4:	f7ff fef0 	bl	8000ad8 <MTIM3_voidStartCounter>
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40000400 	.word	0x40000400

08000d00 <MTIM4_voidConfigICU>:

/* TIMER 4 ICU */
void MTIM4_voidConfigICU(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	/* SLECET CHANNEL 1 TI1*/
	CLR_BIT(TIM4->CR2,TIM_CR2_TI1S);
 8000d04:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	4a2d      	ldr	r2, [pc, #180]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d0e:	6053      	str	r3, [r2, #4]

	/* USE CHANNEL 1 AS INPUT*/
	SET_BIT(TIM4->CCMR1,TIM_CCMR1_CC1S0);
 8000d10:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	4a2a      	ldr	r2, [pc, #168]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6193      	str	r3, [r2, #24]
	CLR_BIT(TIM4->CCMR1,TIM_CCMR1_CC1S1);
 8000d1c:	4b28      	ldr	r3, [pc, #160]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a27      	ldr	r2, [pc, #156]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d22:	f023 0302 	bic.w	r3, r3, #2
 8000d26:	6193      	str	r3, [r2, #24]
	/* SELECT RISING EDGE AS ACTIVE POLARITY*/
	CLR_BIT(TIM4->CCER,TIM_CCER_CC1P);
 8000d28:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d2e:	f023 0302 	bic.w	r3, r3, #2
 8000d32:	6213      	str	r3, [r2, #32]

	/* SELECT CHANNEL 2 INPUT*/
	CLR_BIT(TIM4->CCMR1,TIM_CCMR1_CC2S0);
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a21      	ldr	r2, [pc, #132]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d3e:	6193      	str	r3, [r2, #24]
	SET_BIT(TIM4->CCMR1,TIM_CCMR1_CC2S1);
 8000d40:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d4a:	6193      	str	r3, [r2, #24]

	/* SELECT FALLING EDGE AS ACTIVE POLARITY*/
	SET_BIT(TIM4->CCER,TIM_CCER_CC2P);
 8000d4c:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d4e:	6a1b      	ldr	r3, [r3, #32]
 8000d50:	4a1b      	ldr	r2, [pc, #108]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d52:	f043 0320 	orr.w	r3, r3, #32
 8000d56:	6213      	str	r3, [r2, #32]

	/* FILTER TIMER INPUT 1*/
	SET_BIT(TIM4->SMCR,TIM_SMCR_TS0);
 8000d58:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6093      	str	r3, [r2, #8]
	CLR_BIT(TIM4->SMCR,TIM_SMCR_TS1);
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d6a:	f023 0320 	bic.w	r3, r3, #32
 8000d6e:	6093      	str	r3, [r2, #8]
	SET_BIT(TIM4->SMCR,TIM_SMCR_TS2);
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	4a12      	ldr	r2, [pc, #72]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7a:	6093      	str	r3, [r2, #8]

	/* CONFIGURE SLAVE MODE IN RESET MODE*/
	CLR_BIT(TIM4->SMCR,TIM_SMCR_SMS0);
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d82:	f023 0301 	bic.w	r3, r3, #1
 8000d86:	6093      	str	r3, [r2, #8]
	CLR_BIT(TIM4->SMCR,TIM_SMCR_SMS1);
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d8e:	f023 0302 	bic.w	r3, r3, #2
 8000d92:	6093      	str	r3, [r2, #8]
	SET_BIT(TIM4->SMCR,TIM_SMCR_SMS2);
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6093      	str	r3, [r2, #8]


	/* ENABLE CAPTURES OR 2 CHANNELS*/
	SET_BIT(TIM4->CCER,TIM_CCER_CC1E);
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000da2:	6a1b      	ldr	r3, [r3, #32]
 8000da4:	4a06      	ldr	r2, [pc, #24]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000da6:	f043 0301 	orr.w	r3, r3, #1
 8000daa:	6213      	str	r3, [r2, #32]
	SET_BIT(TIM4->CCER,TIM_CCER_CC2E);
 8000dac:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000dae:	6a1b      	ldr	r3, [r3, #32]
 8000db0:	4a03      	ldr	r2, [pc, #12]	; (8000dc0 <MTIM4_voidConfigICU+0xc0>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6213      	str	r3, [r2, #32]

	MTIM4_voidStartCounter();
 8000db8:	f7ff fea2 	bl	8000b00 <MTIM4_voidStartCounter>
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40000800 	.word	0x40000800

08000dc4 <MTIM2_u8ICU>:


/*Start ICU of timer 2 mode*/
u8 MTIM2_u8ICU(u16 *Copy_u16Period,u16 *Copy_u16PulseWidth)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	u8 Local_u8ErrorState=OK;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]

	/*Polling on rising edge on channel 1*/
	while(GET_BIT(TIM2->SR,TIM_SR_CC1IF) == 0);
 8000dd2:	bf00      	nop
 8000dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	085b      	lsrs	r3, r3, #1
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f7      	beq.n	8000dd4 <MTIM2_u8ICU+0x10>

	/*Polling on falling edge on channel 2*/
	while(GET_BIT(TIM2->SR,TIM_SR_CC2IF) == 0);
 8000de4:	bf00      	nop
 8000de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d0f7      	beq.n	8000de6 <MTIM2_u8ICU+0x22>
	*Copy_u16PulseWidth = TIM2->CCR2;
 8000df6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	801a      	strh	r2, [r3, #0]

	/*Polling on Rising edge on channel 1*/
	while(GET_BIT(TIM2->SR,TIM_SR_CC1IF) == 0);
 8000e02:	bf00      	nop
 8000e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e08:	691b      	ldr	r3, [r3, #16]
 8000e0a:	085b      	lsrs	r3, r3, #1
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0f7      	beq.n	8000e04 <MTIM2_u8ICU+0x40>
	*Copy_u16Period = TIM2->CCR1;
 8000e14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	801a      	strh	r2, [r3, #0]

	return Local_u8ErrorState;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <MTIM3_u8ICU>:

/*Start ICU of timer 3 mode*/
u8 MTIM3_u8ICU(u16 *Copy_u16Period,u16 *Copy_u16PulseWidth)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
	u8 Local_u8ErrorState=OK;
 8000e36:	2301      	movs	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]

	/*Polling on rising edge on channel 1*/
	while(GET_BIT(TIM3->SR,TIM_SR_CC1IF) == 0);
 8000e3a:	bf00      	nop
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MTIM3_u8ICU+0x60>)
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	085b      	lsrs	r3, r3, #1
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d0f8      	beq.n	8000e3c <MTIM3_u8ICU+0x10>

	/*Polling on falling edge on channel 2*/
	while(GET_BIT(TIM3->SR,TIM_SR_CC2IF) == 0);
 8000e4a:	bf00      	nop
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MTIM3_u8ICU+0x60>)
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f8      	beq.n	8000e4c <MTIM3_u8ICU+0x20>
	*Copy_u16PulseWidth = TIM3->CCR2;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MTIM3_u8ICU+0x60>)
 8000e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	801a      	strh	r2, [r3, #0]

	/*Polling on Rising edge on channel 1*/
	while(GET_BIT(TIM3->SR,TIM_SR_CC1IF) == 0);
 8000e64:	bf00      	nop
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MTIM3_u8ICU+0x60>)
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	085b      	lsrs	r3, r3, #1
 8000e6c:	f003 0301 	and.w	r3, r3, #1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f8      	beq.n	8000e66 <MTIM3_u8ICU+0x3a>
	*Copy_u16Period = TIM3->CCR1;
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <MTIM3_u8ICU+0x60>)
 8000e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	801a      	strh	r2, [r3, #0]

	return Local_u8ErrorState;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40000400 	.word	0x40000400

08000e90 <MTIM4_u8ICU>:

/*Start ICU of timer 4 mode*/
u8 MTIM4_u8ICU(u16 *Copy_u16Period,u16 *Copy_u16PulseWidth)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	6039      	str	r1, [r7, #0]
	u8 Local_u8ErrorState=OK;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	73fb      	strb	r3, [r7, #15]

	/*Polling on rising edge on channel 1*/
	while(GET_BIT(TIM4->SR,TIM_SR_CC1IF) == 0);
 8000e9e:	bf00      	nop
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <MTIM4_u8ICU+0x60>)
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	085b      	lsrs	r3, r3, #1
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f8      	beq.n	8000ea0 <MTIM4_u8ICU+0x10>

	/*Polling on falling edge on channel 2*/
	while(GET_BIT(TIM4->SR,TIM_SR_CC2IF) == 0);
 8000eae:	bf00      	nop
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MTIM4_u8ICU+0x60>)
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	089b      	lsrs	r3, r3, #2
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d0f8      	beq.n	8000eb0 <MTIM4_u8ICU+0x20>
	*Copy_u16PulseWidth = TIM4->CCR2;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MTIM4_u8ICU+0x60>)
 8000ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	801a      	strh	r2, [r3, #0]

	/*Polling on Rising edge on channel 1*/
	while(GET_BIT(TIM4->SR,TIM_SR_CC1IF) == 0);
 8000ec8:	bf00      	nop
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MTIM4_u8ICU+0x60>)
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	085b      	lsrs	r3, r3, #1
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d0f8      	beq.n	8000eca <MTIM4_u8ICU+0x3a>
	*Copy_u16Period = TIM4->CCR1;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <MTIM4_u8ICU+0x60>)
 8000eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	801a      	strh	r2, [r3, #0]

	return Local_u8ErrorState;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc80      	pop	{r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40000800 	.word	0x40000800

08000ef4 <TIM2_IRQHandler>:
	return Local_u8ErrorStatus;
}

/*Timer 2 ISR Handler*/
void TIM2_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	if(Global_voidTIM2PtrCallbackFunc!=NULL)
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <TIM2_IRQHandler+0x30>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00e      	beq.n	8000f1e <TIM2_IRQHandler+0x2a>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM2==ENABLED)
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <TIM2_IRQHandler+0x34>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d102      	bne.n	8000f0e <TIM2_IRQHandler+0x1a>
		{
			Global_voidTIM2PtrCallbackFunc();
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <TIM2_IRQHandler+0x30>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM2->SR,TIM_SR_UIF);
 8000f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f12:	691b      	ldr	r3, [r3, #16]
 8000f14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f18:	f023 0301 	bic.w	r3, r3, #1
 8000f1c:	6113      	str	r3, [r2, #16]
	}
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000064 	.word	0x20000064
 8000f28:	20000070 	.word	0x20000070

08000f2c <TIM3_IRQHandler>:


/*Timer 3 ISR Handler*/
void TIM3_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
	if(Global_voidTIM3PtrCallbackFunc!=NULL)
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <TIM3_IRQHandler+0x2c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d00c      	beq.n	8000f52 <TIM3_IRQHandler+0x26>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM3==ENABLED)
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <TIM3_IRQHandler+0x30>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d102      	bne.n	8000f46 <TIM3_IRQHandler+0x1a>
		{
			Global_voidTIM3PtrCallbackFunc();
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <TIM3_IRQHandler+0x2c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM3->SR,TIM_SR_UIF);
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <TIM3_IRQHandler+0x34>)
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <TIM3_IRQHandler+0x34>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	6113      	str	r3, [r2, #16]
	}
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000068 	.word	0x20000068
 8000f5c:	20000071 	.word	0x20000071
 8000f60:	40000400 	.word	0x40000400

08000f64 <TIM4_IRQHandler>:

/*Timer 4 ISR Handler*/
void TIM4_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
	if(Global_voidTIM4PtrCallbackFunc!=NULL)
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <TIM4_IRQHandler+0x2c>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00c      	beq.n	8000f8a <TIM4_IRQHandler+0x26>
	{
		/*Check if the coming interrupt from the underflow or overflow or not*/
		if(Global_u8FlagTIM4==ENABLED)
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <TIM4_IRQHandler+0x30>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d102      	bne.n	8000f7e <TIM4_IRQHandler+0x1a>
		{
			Global_voidTIM4PtrCallbackFunc();
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <TIM4_IRQHandler+0x2c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4798      	blx	r3
		}
		/*Clear the update interrupt flag to be raised in the next interrupt*/
		CLR_BIT(TIM4->SR,TIM_SR_UIF);
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <TIM4_IRQHandler+0x34>)
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <TIM4_IRQHandler+0x34>)
 8000f84:	f023 0301 	bic.w	r3, r3, #1
 8000f88:	6113      	str	r3, [r2, #16]
	}

}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2000006c 	.word	0x2000006c
 8000f94:	20000072 	.word	0x20000072
 8000f98:	40000800 	.word	0x40000800

08000f9c <SPI_Init>:
		SPI2_BASE_ADDRESS
};


SPI_Errors_t SPI_Init ( SPI_t* Ptr_SPI )
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	SPI_Errors_t Local_Error = SPI_NoError;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]

	SPI_Number_t Local_SPINumber = Ptr_SPI->SPI_Number;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	73bb      	strb	r3, [r7, #14]


	/**********************/
	/* clear CR2 register */
	/**********************/
	SPI[ Local_SPINumber ]->CR2 = 0;
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	4a65      	ldr	r2, [pc, #404]	; (8001148 <SPI_Init+0x1ac>)
 8000fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]


	if ( Local_SPINumber < SPI_COUNT )
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	f200 80ba 	bhi.w	8001136 <SPI_Init+0x19a>
	{
		/*******************/
		/* set clock phase */
		/*******************/
		if ( Ptr_SPI->SPI_Phase <= SPI_ClkPhase_TrailingEdge )
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	789b      	ldrb	r3, [r3, #2]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d80e      	bhi.n	8000fe8 <SPI_Init+0x4c>
		{
			SPI[ Local_SPINumber ]->CR1 |= ( Ptr_SPI->SPI_Phase << SPI_CR1_CPHA );
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	4a5e      	ldr	r2, [pc, #376]	; (8001148 <SPI_Init+0x1ac>)
 8000fce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	789b      	ldrb	r3, [r3, #2]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	7bbb      	ldrb	r3, [r7, #14]
 8000fdc:	495a      	ldr	r1, [pc, #360]	; (8001148 <SPI_Init+0x1ac>)
 8000fde:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fe2:	4302      	orrs	r2, r0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e001      	b.n	8000fec <SPI_Init+0x50>
		}
		else
		{
			Local_Error = SPI_ClkPhaseError;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	73fb      	strb	r3, [r7, #15]


		/**********************/
		/* set clock polarity */
		/**********************/
		if ( Ptr_SPI->SPI_Polartity <= SPI_ClkPol_IdleHigh )
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	78db      	ldrb	r3, [r3, #3]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d80f      	bhi.n	8001014 <SPI_Init+0x78>
		{
			SPI[ Local_SPINumber ]->CR1 |= ( Ptr_SPI->SPI_Polartity << SPI_CR1_CPOL );
 8000ff4:	7bbb      	ldrb	r3, [r7, #14]
 8000ff6:	4a54      	ldr	r2, [pc, #336]	; (8001148 <SPI_Init+0x1ac>)
 8000ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	78db      	ldrb	r3, [r3, #3]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4618      	mov	r0, r3
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	494f      	ldr	r1, [pc, #316]	; (8001148 <SPI_Init+0x1ac>)
 800100a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800100e:	4302      	orrs	r2, r0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e001      	b.n	8001018 <SPI_Init+0x7c>
		}
		else
		{
			Local_Error = SPI_ClkPolarityError;
 8001014:	2303      	movs	r3, #3
 8001016:	73fb      	strb	r3, [r7, #15]


		/************/
		/* set mode */
		/************/
		if ( Ptr_SPI->SPI_Mode == SPI_Master )
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	785b      	ldrb	r3, [r3, #1]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d10c      	bne.n	800103a <SPI_Init+0x9e>
		{
			SET_BIT( SPI[ Local_SPINumber ]->CR1, SPI_CR1_MSTR );
 8001020:	7bbb      	ldrb	r3, [r7, #14]
 8001022:	4a49      	ldr	r2, [pc, #292]	; (8001148 <SPI_Init+0x1ac>)
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	7bbb      	ldrb	r3, [r7, #14]
 800102c:	4946      	ldr	r1, [pc, #280]	; (8001148 <SPI_Init+0x1ac>)
 800102e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001032:	f042 0204 	orr.w	r2, r2, #4
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e012      	b.n	8001060 <SPI_Init+0xc4>
		}
		else if ( Ptr_SPI->SPI_Mode == SPI_Slave )
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	785b      	ldrb	r3, [r3, #1]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10c      	bne.n	800105c <SPI_Init+0xc0>
		{
			CLR_BIT( SPI[ Local_SPINumber ]->CR1, SPI_CR1_MSTR );
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	4a40      	ldr	r2, [pc, #256]	; (8001148 <SPI_Init+0x1ac>)
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	7bbb      	ldrb	r3, [r7, #14]
 800104e:	493e      	ldr	r1, [pc, #248]	; (8001148 <SPI_Init+0x1ac>)
 8001050:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001054:	f022 0204 	bic.w	r2, r2, #4
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	e001      	b.n	8001060 <SPI_Init+0xc4>
		}
		else
		{
			Local_Error = SPI_ModeError;
 800105c:	2306      	movs	r3, #6
 800105e:	73fb      	strb	r3, [r7, #15]


		/***************************/
		/* set hardware management */
		/***************************/
		SPI[ Local_SPINumber ]->CR1 |= ( SPI_SW_SLAVE_SELECT << SPI_CR1_SSI );
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	4a39      	ldr	r2, [pc, #228]	; (8001148 <SPI_Init+0x1ac>)
 8001064:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001068:	7bbb      	ldrb	r3, [r7, #14]
 800106a:	4937      	ldr	r1, [pc, #220]	; (8001148 <SPI_Init+0x1ac>)
 800106c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001070:	6812      	ldr	r2, [r2, #0]
 8001072:	601a      	str	r2, [r3, #0]


		/*********************/
		/* set the baud rate */
		/*********************/
		if ( Ptr_SPI->SPI_Mode == SPI_Master )
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	785b      	ldrb	r3, [r3, #1]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d12d      	bne.n	80010d8 <SPI_Init+0x13c>
		{
			if ( Ptr_SPI->SPI_ClkRate <= SPI_ClkRateDiv256 )
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	791b      	ldrb	r3, [r3, #4]
 8001080:	2b07      	cmp	r3, #7
 8001082:	d827      	bhi.n	80010d4 <SPI_Init+0x138>
			{
				SPI[ Local_SPINumber ]->CR1 &= ~( SPI_CLK_MASK << SPI_CR1_BR );
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	4a30      	ldr	r2, [pc, #192]	; (8001148 <SPI_Init+0x1ac>)
 8001088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	7bbb      	ldrb	r3, [r7, #14]
 8001090:	492d      	ldr	r1, [pc, #180]	; (8001148 <SPI_Init+0x1ac>)
 8001092:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001096:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800109a:	601a      	str	r2, [r3, #0]
				SPI[ Local_SPINumber ]->CR1 |= ( Ptr_SPI->SPI_ClkRate << SPI_CR1_BR );
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	4a2a      	ldr	r2, [pc, #168]	; (8001148 <SPI_Init+0x1ac>)
 80010a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	791b      	ldrb	r3, [r3, #4]
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4618      	mov	r0, r3
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	4925      	ldr	r1, [pc, #148]	; (8001148 <SPI_Init+0x1ac>)
 80010b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010b6:	4302      	orrs	r2, r0
 80010b8:	601a      	str	r2, [r3, #0]

				/*********************/
				/* enable NSS output */
				/*********************/
				SET_BIT( SPI[ Local_SPINumber ]->CR2, SPI_CR2_SSOE );
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	4a22      	ldr	r2, [pc, #136]	; (8001148 <SPI_Init+0x1ac>)
 80010be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	7bbb      	ldrb	r3, [r7, #14]
 80010c6:	4920      	ldr	r1, [pc, #128]	; (8001148 <SPI_Init+0x1ac>)
 80010c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010cc:	f042 0204 	orr.w	r2, r2, #4
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	e001      	b.n	80010d8 <SPI_Init+0x13c>
			}
			else
			{
				Local_Error = SPI_ClkRateError;
 80010d4:	2304      	movs	r3, #4
 80010d6:	73fb      	strb	r3, [r7, #15]


		/******************/
		/* set data order */
		/******************/
		if ( Ptr_SPI->SPI_DataOrder <= SPI_LSBFirst )
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	795b      	ldrb	r3, [r3, #5]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d80f      	bhi.n	8001100 <SPI_Init+0x164>
		{
			SPI[ Local_SPINumber ]->CR1 |= ( Ptr_SPI->SPI_DataOrder << SPI_CR1_LSBFIRST );
 80010e0:	7bbb      	ldrb	r3, [r7, #14]
 80010e2:	4a19      	ldr	r2, [pc, #100]	; (8001148 <SPI_Init+0x1ac>)
 80010e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	795b      	ldrb	r3, [r3, #5]
 80010ee:	01db      	lsls	r3, r3, #7
 80010f0:	4618      	mov	r0, r3
 80010f2:	7bbb      	ldrb	r3, [r7, #14]
 80010f4:	4914      	ldr	r1, [pc, #80]	; (8001148 <SPI_Init+0x1ac>)
 80010f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80010fa:	4302      	orrs	r2, r0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	e001      	b.n	8001104 <SPI_Init+0x168>
		}
		else
		{
			Local_Error = SPI_DataOrderError;
 8001100:	2305      	movs	r3, #5
 8001102:	73fb      	strb	r3, [r7, #15]


		/****************************/
		/* set data frame to 8 bits */
		/****************************/
		CLR_BIT( SPI[ Local_SPINumber ]->CR1, SPI_CR1_DFF );
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <SPI_Init+0x1ac>)
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	490d      	ldr	r1, [pc, #52]	; (8001148 <SPI_Init+0x1ac>)
 8001112:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800111a:	601a      	str	r2, [r3, #0]


		/***************************/
		/* set mode to full-duplex */
		/***************************/
		CLR_BIT( SPI[ Local_SPINumber ]->CR1, SPI_CR1_RXONLY );
 800111c:	7bbb      	ldrb	r3, [r7, #14]
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <SPI_Init+0x1ac>)
 8001120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	4907      	ldr	r1, [pc, #28]	; (8001148 <SPI_Init+0x1ac>)
 800112a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800112e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e001      	b.n	800113a <SPI_Init+0x19e>
	}
	else
	{
		Local_Error = SPI_PointerError;
 8001136:	2301      	movs	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]


	/**************************/
	/* return the error state */
	/**************************/
	return Local_Error;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	08001f38 	.word	0x08001f38

0800114c <SPI_SynchTransceiveByte>:
	return Local_Error;
}


SPI_Errors_t SPI_SynchTransceiveByte( SPI_Number_t Copy_SPI, u8 Copy_u8DataSend, u8* Ptr_u8DataReceived )
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	603a      	str	r2, [r7, #0]
 8001156:	71fb      	strb	r3, [r7, #7]
 8001158:	460b      	mov	r3, r1
 800115a:	71bb      	strb	r3, [r7, #6]
	SPI_Errors_t Local_Error = SPI_NoError;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]

	if ( Copy_SPI < SPI_COUNT )
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d824      	bhi.n	80011b0 <SPI_SynchTransceiveByte+0x64>
	{

		/***************************************/
		/* put the data into the data register */
		/***************************************/
		SPI[ Copy_SPI ]->DR = Copy_u8DataSend;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	4a15      	ldr	r2, [pc, #84]	; (80011c0 <SPI_SynchTransceiveByte+0x74>)
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	79ba      	ldrb	r2, [r7, #6]
 8001170:	60da      	str	r2, [r3, #12]


		/*****************************************************/
		/* wait until transmission and reception is complete */
		/*****************************************************/
		while ( !GET_BIT( SPI[ Copy_SPI ]->SR, SPI_SR_TXE ) );
 8001172:	bf00      	nop
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <SPI_SynchTransceiveByte+0x74>)
 8001178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	085b      	lsrs	r3, r3, #1
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0f5      	beq.n	8001174 <SPI_SynchTransceiveByte+0x28>
		while (  GET_BIT( SPI[ Copy_SPI ]->SR, SPI_SR_BSY ) );
 8001188:	bf00      	nop
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <SPI_SynchTransceiveByte+0x74>)
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	09db      	lsrs	r3, r3, #7
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f5      	bne.n	800118a <SPI_SynchTransceiveByte+0x3e>


		/*****************************************/
		/* put the received data to the variable */
		/*****************************************/
		( *Ptr_u8DataReceived ) = SPI[ Copy_SPI ]->DR;
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <SPI_SynchTransceiveByte+0x74>)
 80011a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	701a      	strb	r2, [r3, #0]
 80011ae:	e001      	b.n	80011b4 <SPI_SynchTransceiveByte+0x68>
	}
	else
	{
		Local_Error = SPI_PointerError;
 80011b0:	2301      	movs	r3, #1
 80011b2:	73fb      	strb	r3, [r7, #15]


	/**************************/
	/* return the local error */
	/**************************/
	return Local_Error;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	08001f38 	.word	0x08001f38

080011c4 <SPI_State>:


SPI_Errors_t SPI_State ( SPI_Number_t Copy_SPI, SPI_State_t Copy_u8Status )
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	460a      	mov	r2, r1
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	4613      	mov	r3, r2
 80011d2:	71bb      	strb	r3, [r7, #6]
	SPI_Errors_t Local_Error = SPI_NoError;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]

	if ( Copy_SPI < SPI_COUNT )
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d822      	bhi.n	8001224 <SPI_State+0x60>
	{
		if ( Copy_u8Status == SPI_Enable )
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10c      	bne.n	80011fe <SPI_State+0x3a>
		{
			/*************************/
			/* enable SPI peripheral */
			/*************************/
			SET_BIT( SPI[ Copy_SPI ]->CR1, SPI_CR1_SPE );
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	4a13      	ldr	r2, [pc, #76]	; (8001234 <SPI_State+0x70>)
 80011e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	4910      	ldr	r1, [pc, #64]	; (8001234 <SPI_State+0x70>)
 80011f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	e014      	b.n	8001228 <SPI_State+0x64>
		}
		else if ( Copy_u8Status == SPI_Disable )
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d10c      	bne.n	800121e <SPI_State+0x5a>
		{
			/**************************/
			/* disable SPI peripheral */
			/**************************/
			CLR_BIT( SPI[ Copy_SPI ]->CR1, SPI_CR1_SPE );
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	4a0b      	ldr	r2, [pc, #44]	; (8001234 <SPI_State+0x70>)
 8001208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4908      	ldr	r1, [pc, #32]	; (8001234 <SPI_State+0x70>)
 8001212:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	e004      	b.n	8001228 <SPI_State+0x64>
		}
		else
		{
			Local_Error = SPI_StateError;
 800121e:	2307      	movs	r3, #7
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e001      	b.n	8001228 <SPI_State+0x64>
		}

	}
	else
	{
		Local_Error = SPI_PointerError;
 8001224:	2301      	movs	r3, #1
 8001226:	73fb      	strb	r3, [r7, #15]


	/**************************/
	/* return the local error */
	/**************************/
	return Local_Error;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	08001f38 	.word	0x08001f38

08001238 <USART_voidInit>:

/* Array of Addresses which has type of Struct to addresses USART_t*/
static volatile USART_t* const USART [3] = { USART_1 , USART_2 , USART_3 };

void USART_voidInit(USART_config_t *USART_ptr)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	u8 Local_u8USARTNum=USART_ptr->USART_Number;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	73fb      	strb	r3, [r7, #15]


	/*Calculating the value of BRR corresponding to the BaudRate*/
	u32 Local_u32Mantissa= CLOCK_FREQ / ( 16 * (USART_ptr -> USART_BaudRate ) );
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	011b      	lsls	r3, r3, #4
 800124c:	4a95      	ldr	r2, [pc, #596]	; (80014a4 <USART_voidInit+0x26c>)
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	617b      	str	r3, [r7, #20]
	u32 Local_u32Fraction = ((( CLOCK_FREQ * 100 ) / ( 16 * (USART_ptr->USART_BaudRate) )) % 100 ) * 16 ;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4a93      	ldr	r2, [pc, #588]	; (80014a8 <USART_voidInit+0x270>)
 800125c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001260:	4b92      	ldr	r3, [pc, #584]	; (80014ac <USART_voidInit+0x274>)
 8001262:	fba3 1302 	umull	r1, r3, r3, r2
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2164      	movs	r1, #100	; 0x64
 800126a:	fb01 f303 	mul.w	r3, r1, r3
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	613b      	str	r3, [r7, #16]

	if( Local_u32Fraction > 1500 )
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800127a:	4293      	cmp	r3, r2
 800127c:	d904      	bls.n	8001288 <USART_voidInit+0x50>
	{
		Local_u32Mantissa += 1 ;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	3301      	adds	r3, #1
 8001282:	617b      	str	r3, [r7, #20]
		Local_u32Fraction = 0 ;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
	}
	USART [Local_u8USARTNum] -> BRR	= ( Local_u32Mantissa << 4 ) | ( Local_u32Fraction / 100 );
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	0119      	lsls	r1, r3, #4
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4a87      	ldr	r2, [pc, #540]	; (80014ac <USART_voidInit+0x274>)
 8001290:	fba2 2303 	umull	r2, r3, r2, r3
 8001294:	095a      	lsrs	r2, r3, #5
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	4885      	ldr	r0, [pc, #532]	; (80014b0 <USART_voidInit+0x278>)
 800129a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800129e:	430a      	orrs	r2, r1
 80012a0:	609a      	str	r2, [r3, #8]


	/*Enabling the TX and RX*/
	SET_BIT( USART[Local_u8USARTNum] -> CR1 , USART_TE);
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	4a82      	ldr	r2, [pc, #520]	; (80014b0 <USART_voidInit+0x278>)
 80012a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	4980      	ldr	r1, [pc, #512]	; (80014b0 <USART_voidInit+0x278>)
 80012b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012b4:	f042 0208 	orr.w	r2, r2, #8
 80012b8:	60da      	str	r2, [r3, #12]
	SET_BIT( USART[Local_u8USARTNum] -> CR1 , USART_RE);
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	4a7c      	ldr	r2, [pc, #496]	; (80014b0 <USART_voidInit+0x278>)
 80012be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	497a      	ldr	r1, [pc, #488]	; (80014b0 <USART_voidInit+0x278>)
 80012c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012cc:	f042 0204 	orr.w	r2, r2, #4
 80012d0:	60da      	str	r2, [r3, #12]

	/*Parity Check Enable*/
	if(USART_ptr->USART_ParityCheck == USART_ParityCheckEnabled)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7adb      	ldrb	r3, [r3, #11]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10c      	bne.n	80012f4 <USART_voidInit+0xbc>
	{
		SET_BIT(USART [Local_u8USARTNum] -> CR1 , USART_PCE);
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	4a74      	ldr	r2, [pc, #464]	; (80014b0 <USART_voidInit+0x278>)
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	4972      	ldr	r1, [pc, #456]	; (80014b0 <USART_voidInit+0x278>)
 80012e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	e00b      	b.n	800130c <USART_voidInit+0xd4>
	}
	else
	{
		CLR_BIT(USART [Local_u8USARTNum] -> CR1 , USART_PCE);
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	4a6e      	ldr	r2, [pc, #440]	; (80014b0 <USART_voidInit+0x278>)
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	496b      	ldr	r1, [pc, #428]	; (80014b0 <USART_voidInit+0x278>)
 8001302:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800130a:	60da      	str	r2, [r3, #12]
	}
	/*Even or Odd Parity  */
	if(USART_ptr->USART_Parity == USART_EvenParity )
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7a5b      	ldrb	r3, [r3, #9]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10c      	bne.n	800132e <USART_voidInit+0xf6>
	{
		CLR_BIT(USART [Local_u8USARTNum] -> CR1, USART_PS );
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	4a66      	ldr	r2, [pc, #408]	; (80014b0 <USART_voidInit+0x278>)
 8001318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	4963      	ldr	r1, [pc, #396]	; (80014b0 <USART_voidInit+0x278>)
 8001322:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001326:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800132a:	60da      	str	r2, [r3, #12]
 800132c:	e00f      	b.n	800134e <USART_voidInit+0x116>
	}
	else if( USART_ptr -> USART_Parity == USART_OddParity )
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7a5b      	ldrb	r3, [r3, #9]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10b      	bne.n	800134e <USART_voidInit+0x116>
	{
		SET_BIT(USART [Local_u8USARTNum] -> CR1, USART_PS );
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	4a5d      	ldr	r2, [pc, #372]	; (80014b0 <USART_voidInit+0x278>)
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	7bfb      	ldrb	r3, [r7, #15]
 8001342:	495b      	ldr	r1, [pc, #364]	; (80014b0 <USART_voidInit+0x278>)
 8001344:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800134c:	60da      	str	r2, [r3, #12]
	}



	/*Data length*/
	if(USART_ptr -> USART_DataLength == USART_Data8Bits)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7a1b      	ldrb	r3, [r3, #8]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d10c      	bne.n	8001370 <USART_voidInit+0x138>
	{
		CLR_BIT ( USART[Local_u8USARTNum] -> CR1 , USART_M );
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	4a55      	ldr	r2, [pc, #340]	; (80014b0 <USART_voidInit+0x278>)
 800135a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800135e:	68da      	ldr	r2, [r3, #12]
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	4953      	ldr	r1, [pc, #332]	; (80014b0 <USART_voidInit+0x278>)
 8001364:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001368:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	e00f      	b.n	8001390 <USART_voidInit+0x158>
	}
	else if(USART_ptr -> USART_DataLength == USART_Data9Bits)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	7a1b      	ldrb	r3, [r3, #8]
 8001374:	2b01      	cmp	r3, #1
 8001376:	d10b      	bne.n	8001390 <USART_voidInit+0x158>
	{
		SET_BIT ( USART[Local_u8USARTNum] -> CR1 , USART_M );
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	4a4d      	ldr	r2, [pc, #308]	; (80014b0 <USART_voidInit+0x278>)
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	68da      	ldr	r2, [r3, #12]
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	494a      	ldr	r1, [pc, #296]	; (80014b0 <USART_voidInit+0x278>)
 8001386:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800138a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800138e:	60da      	str	r2, [r3, #12]
	}


	/*Number of Stop bits*/
	if(USART_ptr -> USART_StopBits == USART_1StopBits)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7a9b      	ldrb	r3, [r3, #10]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d118      	bne.n	80013ca <USART_voidInit+0x192>
	{
		CLR_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP1 );
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	4a45      	ldr	r2, [pc, #276]	; (80014b0 <USART_voidInit+0x278>)
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	691a      	ldr	r2, [r3, #16]
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4942      	ldr	r1, [pc, #264]	; (80014b0 <USART_voidInit+0x278>)
 80013a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013ae:	611a      	str	r2, [r3, #16]
		CLR_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP0 );
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4a3f      	ldr	r2, [pc, #252]	; (80014b0 <USART_voidInit+0x278>)
 80013b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b8:	691a      	ldr	r2, [r3, #16]
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	493c      	ldr	r1, [pc, #240]	; (80014b0 <USART_voidInit+0x278>)
 80013be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	e055      	b.n	8001476 <USART_voidInit+0x23e>
	}
	else if(USART_ptr -> USART_StopBits == USART_2StopBits)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7a9b      	ldrb	r3, [r3, #10]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d118      	bne.n	8001404 <USART_voidInit+0x1cc>
	{
		SET_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP1 );
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	4a36      	ldr	r2, [pc, #216]	; (80014b0 <USART_voidInit+0x278>)
 80013d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	4934      	ldr	r1, [pc, #208]	; (80014b0 <USART_voidInit+0x278>)
 80013e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013e8:	611a      	str	r2, [r3, #16]
		CLR_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP0 );
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	4a30      	ldr	r2, [pc, #192]	; (80014b0 <USART_voidInit+0x278>)
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	691a      	ldr	r2, [r3, #16]
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	492e      	ldr	r1, [pc, #184]	; (80014b0 <USART_voidInit+0x278>)
 80013f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80013fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	e038      	b.n	8001476 <USART_voidInit+0x23e>
	}
	else if(USART_ptr -> USART_StopBits == USART_halfStopBit)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7a9b      	ldrb	r3, [r3, #10]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d118      	bne.n	800143e <USART_voidInit+0x206>
	{
		CLR_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP1 );
 800140c:	7bfb      	ldrb	r3, [r7, #15]
 800140e:	4a28      	ldr	r2, [pc, #160]	; (80014b0 <USART_voidInit+0x278>)
 8001410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001414:	691a      	ldr	r2, [r3, #16]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	4925      	ldr	r1, [pc, #148]	; (80014b0 <USART_voidInit+0x278>)
 800141a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800141e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001422:	611a      	str	r2, [r3, #16]
		SET_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP0 );
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	4a22      	ldr	r2, [pc, #136]	; (80014b0 <USART_voidInit+0x278>)
 8001428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142c:	691a      	ldr	r2, [r3, #16]
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	491f      	ldr	r1, [pc, #124]	; (80014b0 <USART_voidInit+0x278>)
 8001432:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001436:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800143a:	611a      	str	r2, [r3, #16]
 800143c:	e01b      	b.n	8001476 <USART_voidInit+0x23e>
	}
	else if(USART_ptr -> USART_StopBits == USART_three_halfsStopBits)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7a9b      	ldrb	r3, [r3, #10]
 8001442:	2b03      	cmp	r3, #3
 8001444:	d117      	bne.n	8001476 <USART_voidInit+0x23e>
	{
		SET_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP1 );
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	4a19      	ldr	r2, [pc, #100]	; (80014b0 <USART_voidInit+0x278>)
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	4917      	ldr	r1, [pc, #92]	; (80014b0 <USART_voidInit+0x278>)
 8001454:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001458:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800145c:	611a      	str	r2, [r3, #16]
		SET_BIT ( USART[Local_u8USARTNum] -> CR2 , USART_STOP0 );
 800145e:	7bfb      	ldrb	r3, [r7, #15]
 8001460:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <USART_voidInit+0x278>)
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	4911      	ldr	r1, [pc, #68]	; (80014b0 <USART_voidInit+0x278>)
 800146c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001470:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001474:	611a      	str	r2, [r3, #16]
	}


		/*Enable the USART*/
		SET_BIT( USART[Local_u8USARTNum] -> CR1 , USART_UE );
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <USART_voidInit+0x278>)
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	490b      	ldr	r1, [pc, #44]	; (80014b0 <USART_voidInit+0x278>)
 8001484:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800148c:	60da      	str	r2, [r3, #12]
		/*Clear the status register*/
		USART[Local_u8USARTNum] -> SR = 0x00;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <USART_voidInit+0x278>)
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]

}
 800149a:	bf00      	nop
 800149c:	371c      	adds	r7, #28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	007a1200 	.word	0x007a1200
 80014a8:	2faf0800 	.word	0x2faf0800
 80014ac:	51eb851f 	.word	0x51eb851f
 80014b0:	08001f40 	.word	0x08001f40

080014b4 <USART_voidTransmitByteSynch>:


void USART_voidTransmitByteSynch(u8	Local_u8Byte , USART_Num_t Copy_USARTNumber)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	460a      	mov	r2, r1
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71bb      	strb	r3, [r7, #6]
	/*Send the Byte to the Data Register*/
	USART[Copy_USARTNumber] -> DR = Local_u8Byte;
 80014c4:	79bb      	ldrb	r3, [r7, #6]
 80014c6:	4a10      	ldr	r2, [pc, #64]	; (8001508 <USART_voidTransmitByteSynch+0x54>)
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	79fa      	ldrb	r2, [r7, #7]
 80014ce:	605a      	str	r2, [r3, #4]

	/*Wait until the transmission complete*/
	while(GET_BIT(USART[Copy_USARTNumber]-> SR , USART_TC) == 0);
 80014d0:	bf00      	nop
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <USART_voidTransmitByteSynch+0x54>)
 80014d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	099b      	lsrs	r3, r3, #6
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f5      	beq.n	80014d2 <USART_voidTransmitByteSynch+0x1e>

	/*Clear the transmission Complete flag*/
	CLR_BIT(USART[Copy_USARTNumber] -> SR , USART_TC);
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <USART_voidTransmitByteSynch+0x54>)
 80014ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	4905      	ldr	r1, [pc, #20]	; (8001508 <USART_voidTransmitByteSynch+0x54>)
 80014f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014fc:	601a      	str	r2, [r3, #0]

}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	08001f40 	.word	0x08001f40

0800150c <USART_voidSendNumber>:
	}

	Copy_ptr_u8_RXArr[Local_u16Iterator] = '\0';
}
void  USART_voidSendNumber(s32 Copy_s32Number, USART_Num_t Copy_USARTNumber)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b086      	sub	sp, #24
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	460b      	mov	r3, r1
 8001516:	70fb      	strb	r3, [r7, #3]

	u8 Local_u8Counter=0,Local_u8SentNumber;
 8001518:	2300      	movs	r3, #0
 800151a:	75fb      	strb	r3, [r7, #23]
	u32 Local_u32divisible=1;
 800151c:	2301      	movs	r3, #1
 800151e:	613b      	str	r3, [r7, #16]

	if(Copy_s32Number < 0)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	da07      	bge.n	8001536 <USART_voidSendNumber+0x2a>
	{
		USART_voidTransmitByteSynch('-', Copy_USARTNumber);
 8001526:	78fb      	ldrb	r3, [r7, #3]
 8001528:	4619      	mov	r1, r3
 800152a:	202d      	movs	r0, #45	; 0x2d
 800152c:	f7ff ffc2 	bl	80014b4 <USART_voidTransmitByteSynch>
		Copy_s32Number  *= -1;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	425b      	negs	r3, r3
 8001534:	607b      	str	r3, [r7, #4]
	}

	s32 Local_u32temp=Copy_s32Number;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	60fb      	str	r3, [r7, #12]

	if(Copy_s32Number==0)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d110      	bne.n	8001562 <USART_voidSendNumber+0x56>
		USART_voidTransmitByteSynch('0',Copy_USARTNumber);
 8001540:	78fb      	ldrb	r3, [r7, #3]
 8001542:	4619      	mov	r1, r3
 8001544:	2030      	movs	r0, #48	; 0x30
 8001546:	f7ff ffb5 	bl	80014b4 <USART_voidTransmitByteSynch>
			Copy_s32Number=Copy_s32Number-(Local_u8SentNumber*Local_u32divisible);
			Local_u32divisible=Local_u32divisible/10;
		}
	}

}
 800154a:	e038      	b.n	80015be <USART_voidSendNumber+0xb2>
			Local_u8Counter++;
 800154c:	7dfb      	ldrb	r3, [r7, #23]
 800154e:	3301      	adds	r3, #1
 8001550:	75fb      	strb	r3, [r7, #23]
			Local_u32temp=Local_u32temp/10;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4a1c      	ldr	r2, [pc, #112]	; (80015c8 <USART_voidSendNumber+0xbc>)
 8001556:	fb82 1203 	smull	r1, r2, r2, r3
 800155a:	1092      	asrs	r2, r2, #2
 800155c:	17db      	asrs	r3, r3, #31
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	60fb      	str	r3, [r7, #12]
		while(Local_u32temp!=0)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f1      	bne.n	800154c <USART_voidSendNumber+0x40>
		while(Local_u8Counter>1)
 8001568:	e008      	b.n	800157c <USART_voidSendNumber+0x70>
			Local_u8Counter--;
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	3b01      	subs	r3, #1
 800156e:	75fb      	strb	r3, [r7, #23]
			Local_u32divisible*=10;
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4613      	mov	r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	4413      	add	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	613b      	str	r3, [r7, #16]
		while(Local_u8Counter>1)
 800157c:	7dfb      	ldrb	r3, [r7, #23]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d8f3      	bhi.n	800156a <USART_voidSendNumber+0x5e>
		while(Local_u32divisible!=0)
 8001582:	e019      	b.n	80015b8 <USART_voidSendNumber+0xac>
			Local_u8SentNumber=Copy_s32Number/Local_u32divisible;
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	fbb2 f3f3 	udiv	r3, r2, r3
 800158c:	72fb      	strb	r3, [r7, #11]
			USART_voidTransmitByteSynch(Local_u8SentNumber+'0' ,Copy_USARTNumber);
 800158e:	7afb      	ldrb	r3, [r7, #11]
 8001590:	3330      	adds	r3, #48	; 0x30
 8001592:	b2db      	uxtb	r3, r3
 8001594:	78fa      	ldrb	r2, [r7, #3]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff8b 	bl	80014b4 <USART_voidTransmitByteSynch>
			Copy_s32Number=Copy_s32Number-(Local_u8SentNumber*Local_u32divisible);
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	7afb      	ldrb	r3, [r7, #11]
 80015a2:	6939      	ldr	r1, [r7, #16]
 80015a4:	fb01 f303 	mul.w	r3, r1, r3
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	607b      	str	r3, [r7, #4]
			Local_u32divisible=Local_u32divisible/10;
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	4a07      	ldr	r2, [pc, #28]	; (80015cc <USART_voidSendNumber+0xc0>)
 80015b0:	fba2 2303 	umull	r2, r3, r2, r3
 80015b4:	08db      	lsrs	r3, r3, #3
 80015b6:	613b      	str	r3, [r7, #16]
		while(Local_u32divisible!=0)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1e2      	bne.n	8001584 <USART_voidSendNumber+0x78>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	66666667 	.word	0x66666667
 80015cc:	cccccccd 	.word	0xcccccccd

080015d0 <HULTRASONIC_voidInit>:
#include "ULTRASONIC_config.h"
#include "ULTRASONIC_private.h"
#include "ULTRASONIC_interface.h"

void HULTRASONIC_voidInit(Ultrasonic_t* Copy_Sensor)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	/*ICU Configurations*/
	switch(Copy_Sensor->Echo_ICU_TIM)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	789b      	ldrb	r3, [r3, #2]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d00c      	beq.n	80015fa <HULTRASONIC_voidInit+0x2a>
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	dc0d      	bgt.n	8001600 <HULTRASONIC_voidInit+0x30>
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d002      	beq.n	80015ee <HULTRASONIC_voidInit+0x1e>
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d003      	beq.n	80015f4 <HULTRASONIC_voidInit+0x24>
	{
	case TIM2:	MTIM2_voidConfigICU(); break;
	case TIM3:	MTIM3_voidConfigICU(); break;
	case TIM4:	MTIM4_voidConfigICU(); break;
	}
}
 80015ec:	e008      	b.n	8001600 <HULTRASONIC_voidInit+0x30>
	case TIM2:	MTIM2_voidConfigICU(); break;
 80015ee:	f7ff faa7 	bl	8000b40 <MTIM2_voidConfigICU>
 80015f2:	e005      	b.n	8001600 <HULTRASONIC_voidInit+0x30>
	case TIM3:	MTIM3_voidConfigICU(); break;
 80015f4:	f7ff fb22 	bl	8000c3c <MTIM3_voidConfigICU>
 80015f8:	e002      	b.n	8001600 <HULTRASONIC_voidInit+0x30>
	case TIM4:	MTIM4_voidConfigICU(); break;
 80015fa:	f7ff fb81 	bl	8000d00 <MTIM4_voidConfigICU>
 80015fe:	bf00      	nop
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HULTRASONIC_voidGetDistance>:

void HULTRASONIC_voidGetDistance(Ultrasonic_t* Copy_Sensor,u32* Copy_u8SensorDistance)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	/*Local variables to receive On ticks and Period Ticks*/
	f32 Local_u32Time_ms=0;
 8001612:	f04f 0300 	mov.w	r3, #0
 8001616:	60fb      	str	r3, [r7, #12]
	u16 Local_u16OnTicks = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	817b      	strh	r3, [r7, #10]
	u16 Local_u16PeriodTicks = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	813b      	strh	r3, [r7, #8]
	/**************************************************************************/
	/***********************Generating Pulse on Trig Pin***********************/
	/**************************************************************************/

	/*Generate Low signal for 2 microseconds*/
	MDIO_u8WriteChannel(Copy_Sensor->TrigPort, Copy_Sensor->TrigPin, MDIO_PIN_LOW);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7818      	ldrb	r0, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	785b      	ldrb	r3, [r3, #1]
 8001628:	2200      	movs	r2, #0
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff f8a2 	bl	8000774 <MDIO_u8WriteChannel>
	MSTK_voidSetBusyWait((2)US);
 8001630:	2002      	movs	r0, #2
 8001632:	f7ff f915 	bl	8000860 <MSTK_voidSetBusyWait>
	/*Generate High signal for 2 microseconds*/
	MDIO_u8WriteChannel(Copy_Sensor->TrigPort, Copy_Sensor->TrigPin, MDIO_PIN_HIGH);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7818      	ldrb	r0, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	785b      	ldrb	r3, [r3, #1]
 800163e:	2201      	movs	r2, #1
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff f897 	bl	8000774 <MDIO_u8WriteChannel>
	MSTK_voidSetBusyWait((10)US);
 8001646:	200a      	movs	r0, #10
 8001648:	f7ff f90a 	bl	8000860 <MSTK_voidSetBusyWait>
	/*Clear bit again*/
	MDIO_u8WriteChannel(Copy_Sensor->TrigPort, Copy_Sensor->TrigPin, MDIO_PIN_LOW);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7818      	ldrb	r0, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	785b      	ldrb	r3, [r3, #1]
 8001654:	2200      	movs	r2, #0
 8001656:	4619      	mov	r1, r3
 8001658:	f7ff f88c 	bl	8000774 <MDIO_u8WriteChannel>

	/**************************************************************************/
	/********************Capture the echo signal with ICU**********************/
	/**************************************************************************/

	switch(Copy_Sensor->Echo_ICU_TIM)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	789b      	ldrb	r3, [r3, #2]
 8001660:	2b03      	cmp	r3, #3
 8001662:	d018      	beq.n	8001696 <HULTRASONIC_voidGetDistance+0x8e>
 8001664:	2b03      	cmp	r3, #3
 8001666:	dc1f      	bgt.n	80016a8 <HULTRASONIC_voidGetDistance+0xa0>
 8001668:	2b01      	cmp	r3, #1
 800166a:	d002      	beq.n	8001672 <HULTRASONIC_voidGetDistance+0x6a>
 800166c:	2b02      	cmp	r3, #2
 800166e:	d009      	beq.n	8001684 <HULTRASONIC_voidGetDistance+0x7c>
 8001670:	e01a      	b.n	80016a8 <HULTRASONIC_voidGetDistance+0xa0>
	{
	case TIM2:	MTIM2_u8ICU(&Local_u16PeriodTicks, &Local_u16OnTicks); break;
 8001672:	f107 020a 	add.w	r2, r7, #10
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fba1 	bl	8000dc4 <MTIM2_u8ICU>
 8001682:	e011      	b.n	80016a8 <HULTRASONIC_voidGetDistance+0xa0>
	case TIM3:	MTIM3_u8ICU(&Local_u16PeriodTicks, &Local_u16OnTicks); break;
 8001684:	f107 020a 	add.w	r2, r7, #10
 8001688:	f107 0308 	add.w	r3, r7, #8
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fbcc 	bl	8000e2c <MTIM3_u8ICU>
 8001694:	e008      	b.n	80016a8 <HULTRASONIC_voidGetDistance+0xa0>
	case TIM4:	MTIM4_u8ICU(&Local_u16PeriodTicks, &Local_u16OnTicks); break;
 8001696:	f107 020a 	add.w	r2, r7, #10
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4611      	mov	r1, r2
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fbf5 	bl	8000e90 <MTIM4_u8ICU>
 80016a6:	bf00      	nop
	/**************************************************************************/


	// Speed of sound = 343 mm/ms

	Local_u32Time_ms=Local_u16OnTicks*10;
 80016a8:	897b      	ldrh	r3, [r7, #10]
 80016aa:	461a      	mov	r2, r3
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fe15 	bl	80002e4 <__aeabi_i2f>
 80016ba:	4603      	mov	r3, r0
 80016bc:	60fb      	str	r3, [r7, #12]
//	*Copy_u8SensorDistance =((((Local_u32Time_ms*0.000343)/2)*10)+20);
	*Copy_u8SensorDistance =(Local_u32Time_ms*(f32)0.00343)/2;
 80016be:	492a      	ldr	r1, [pc, #168]	; (8001768 <HULTRASONIC_voidGetDistance+0x160>)
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f7fe fe63 	bl	800038c <__aeabi_fmul>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7fe ff11 	bl	80004f4 <__aeabi_fdiv>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7fe ffa9 	bl	800062c <__aeabi_f2uiz>
 80016da:	4602      	mov	r2, r0
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	601a      	str	r2, [r3, #0]

	if(*Copy_u8SensorDistance < 75)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b4a      	cmp	r3, #74	; 0x4a
 80016e6:	d805      	bhi.n	80016f4 <HULTRASONIC_voidGetDistance+0xec>
	{
		*Copy_u8SensorDistance += 5;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	1d5a      	adds	r2, r3, #5
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	601a      	str	r2, [r3, #0]
	else
	{
		*Copy_u8SensorDistance += 280;
	}

}
 80016f2:	e035      	b.n	8001760 <HULTRASONIC_voidGetDistance+0x158>
	else if (*Copy_u8SensorDistance < 110)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b6d      	cmp	r3, #109	; 0x6d
 80016fa:	d806      	bhi.n	800170a <HULTRASONIC_voidGetDistance+0x102>
		*Copy_u8SensorDistance += 20;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f103 0214 	add.w	r2, r3, #20
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	601a      	str	r2, [r3, #0]
}
 8001708:	e02a      	b.n	8001760 <HULTRASONIC_voidGetDistance+0x158>
	else if(*Copy_u8SensorDistance < 400)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001712:	d206      	bcs.n	8001722 <HULTRASONIC_voidGetDistance+0x11a>
		*Copy_u8SensorDistance += 40;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	601a      	str	r2, [r3, #0]
}
 8001720:	e01e      	b.n	8001760 <HULTRASONIC_voidGetDistance+0x158>
	else if(*Copy_u8SensorDistance < 600)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800172a:	d206      	bcs.n	800173a <HULTRASONIC_voidGetDistance+0x132>
		*Copy_u8SensorDistance += 80;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	601a      	str	r2, [r3, #0]
}
 8001738:	e012      	b.n	8001760 <HULTRASONIC_voidGetDistance+0x158>
	else if(*Copy_u8SensorDistance <850)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f240 3251 	movw	r2, #849	; 0x351
 8001742:	4293      	cmp	r3, r2
 8001744:	d806      	bhi.n	8001754 <HULTRASONIC_voidGetDistance+0x14c>
		*Copy_u8SensorDistance += 200;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	e005      	b.n	8001760 <HULTRASONIC_voidGetDistance+0x158>
		*Copy_u8SensorDistance += 280;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	601a      	str	r2, [r3, #0]
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	3b60c9da 	.word	0x3b60c9da

0800176c <MCP2515_VidWriteRegister>:
	return Reading;
}


void MCP2515_VidWriteRegister(u8 address, u8 value)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	71fb      	strb	r3, [r7, #7]
 8001778:	4613      	mov	r3, r2
 800177a:	71bb      	strb	r3, [r7, #6]
	u8 Reading;

	SPI_State( usedSPI , SPI_Enable );
 800177c:	2100      	movs	r1, #0
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fd20 	bl	80011c4 <SPI_State>
	SPI_SynchTransceiveByte( usedSPI , INST_WRITE , &Reading);
 8001784:	f107 030f 	add.w	r3, r7, #15
 8001788:	461a      	mov	r2, r3
 800178a:	2102      	movs	r1, #2
 800178c:	2000      	movs	r0, #0
 800178e:	f7ff fcdd 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , address , &Reading);
 8001792:	f107 020f 	add.w	r2, r7, #15
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	4619      	mov	r1, r3
 800179a:	2000      	movs	r0, #0
 800179c:	f7ff fcd6 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , value , &Reading);
 80017a0:	f107 020f 	add.w	r2, r7, #15
 80017a4:	79bb      	ldrb	r3, [r7, #6]
 80017a6:	4619      	mov	r1, r3
 80017a8:	2000      	movs	r0, #0
 80017aa:	f7ff fccf 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_State( usedSPI, SPI_Disable );
 80017ae:	2101      	movs	r1, #1
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7ff fd07 	bl	80011c4 <SPI_State>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <MCP2515_VidSetBitTiming>:


void MCP2515_VidSetBitTiming(u8 cnf1Value, u8 cnf2Value, u8 cnf3Value)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4603      	mov	r3, r0
 80017c6:	71fb      	strb	r3, [r7, #7]
 80017c8:	460b      	mov	r3, r1
 80017ca:	71bb      	strb	r3, [r7, #6]
 80017cc:	4613      	mov	r3, r2
 80017ce:	717b      	strb	r3, [r7, #5]
	MCP2515_VidWriteRegister( CNF1 , cnf1Value );
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	4619      	mov	r1, r3
 80017d4:	202a      	movs	r0, #42	; 0x2a
 80017d6:	f7ff ffc9 	bl	800176c <MCP2515_VidWriteRegister>
	MCP2515_VidWriteRegister( CNF2 , cnf2Value );
 80017da:	79bb      	ldrb	r3, [r7, #6]
 80017dc:	4619      	mov	r1, r3
 80017de:	2029      	movs	r0, #41	; 0x29
 80017e0:	f7ff ffc4 	bl	800176c <MCP2515_VidWriteRegister>
	MCP2515_VidWriteRegister( CNF3 , cnf3Value );
 80017e4:	797b      	ldrb	r3, [r7, #5]
 80017e6:	4619      	mov	r1, r3
 80017e8:	2028      	movs	r0, #40	; 0x28
 80017ea:	f7ff ffbf 	bl	800176c <MCP2515_VidWriteRegister>
}
 80017ee:	bf00      	nop
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <MCP2515_VidReset>:


void MCP2515_VidReset()
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
	u8 Reading;

	SPI_State( usedSPI , SPI_Enable);
 80017fc:	2100      	movs	r1, #0
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fce0 	bl	80011c4 <SPI_State>
	SPI_SynchTransceiveByte( usedSPI , INST_RESET , &Reading );
 8001804:	1dfb      	adds	r3, r7, #7
 8001806:	461a      	mov	r2, r3
 8001808:	21c0      	movs	r1, #192	; 0xc0
 800180a:	2000      	movs	r0, #0
 800180c:	f7ff fc9e 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_State( usedSPI , SPI_Disable );
 8001810:	2101      	movs	r1, #1
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fcd6 	bl	80011c4 <SPI_State>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <MCP2515_VidChangeBits>:


void MCP2515_VidChangeBits(u8 RegAddress, u8 Mask, u8 Value)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	460b      	mov	r3, r1
 800182c:	71bb      	strb	r3, [r7, #6]
 800182e:	4613      	mov	r3, r2
 8001830:	717b      	strb	r3, [r7, #5]
	u8 Reading;

	SPI_State( usedSPI , SPI_Enable);
 8001832:	2100      	movs	r1, #0
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff fcc5 	bl	80011c4 <SPI_State>
	SPI_SynchTransceiveByte( usedSPI , INST_BIT_MODIFY , &Reading );
 800183a:	f107 030f 	add.w	r3, r7, #15
 800183e:	461a      	mov	r2, r3
 8001840:	2105      	movs	r1, #5
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff fc82 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , RegAddress , &Reading );
 8001848:	f107 020f 	add.w	r2, r7, #15
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	4619      	mov	r1, r3
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff fc7b 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , Mask , &Reading);
 8001856:	f107 020f 	add.w	r2, r7, #15
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	4619      	mov	r1, r3
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff fc74 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , Value , &Reading );
 8001864:	f107 020f 	add.w	r2, r7, #15
 8001868:	797b      	ldrb	r3, [r7, #5]
 800186a:	4619      	mov	r1, r3
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff fc6d 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_State( usedSPI , SPI_Disable );
 8001872:	2101      	movs	r1, #1
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff fca5 	bl	80011c4 <SPI_State>
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <MCP2515_VidSetMode>:


void MCP2515_VidSetMode(u8 mode)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	71fb      	strb	r3, [r7, #7]
	MCP2515_VidChangeBits( CANCTRL , 0xE0 , ( mode << 5 ) );
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	015b      	lsls	r3, r3, #5
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	21e0      	movs	r1, #224	; 0xe0
 8001896:	200f      	movs	r0, #15
 8001898:	f7ff ffc2 	bl	8001820 <MCP2515_VidChangeBits>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <MCP2515_VidInit>:


void MCP2515_VidInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
	//	SPI_VidMasterInit();
	SPI_t spi =
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <MCP2515_VidInit+0x40>)
 80018ac:	463b      	mov	r3, r7
 80018ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018b2:	6018      	str	r0, [r3, #0]
 80018b4:	3304      	adds	r3, #4
 80018b6:	8019      	strh	r1, [r3, #0]
			.SPI_Polartity = SPI_ClkPol_IdleLow,
			.SPI_ClkRate   = SPI_ClkRateDiv4,
			.SPI_DataOrder = SPI_MSBFirst,
	};

	SPI_Init( &spi );
 80018b8:	463b      	mov	r3, r7
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff fb6e 	bl	8000f9c <SPI_Init>

	MCP2515_VidReset();
 80018c0:	f7ff ff99 	bl	80017f6 <MCP2515_VidReset>

	//	// enter configuration mode and enable CLKOUT with no prescaler
	MCP2515_VidWriteRegister( CANCTRL , 0x84 ); // 1000 0100
 80018c4:	2184      	movs	r1, #132	; 0x84
 80018c6:	200f      	movs	r0, #15
 80018c8:	f7ff ff50 	bl	800176c <MCP2515_VidWriteRegister>

	// to run at 250KHz bitrate using 8MHz osc
	MCP2515_VidSetBitTiming( ( 2 << 6 ) , ( 1 << 7 ) | ( 6 << 3 ) | ( 1 ) , ( 5 ) );
 80018cc:	2205      	movs	r2, #5
 80018ce:	21b1      	movs	r1, #177	; 0xb1
 80018d0:	2080      	movs	r0, #128	; 0x80
 80018d2:	f7ff ff74 	bl	80017be <MCP2515_VidSetBitTiming>

	MCP2515_VidSetMode( MCP2515_MODE_NORMAL );
 80018d6:	2000      	movs	r0, #0
 80018d8:	f7ff ffd3 	bl	8001882 <MCP2515_VidSetMode>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	08001f20 	.word	0x08001f20

080018e8 <MCP2515_VidSendCANmsg>:


/********************************TX***************************/
void MCP2515_VidSendCANmsg(u8 bufIdx, u32 msgID, u8 * data,u8 properties)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	461a      	mov	r2, r3
 80018f4:	4603      	mov	r3, r0
 80018f6:	73fb      	strb	r3, [r7, #15]
 80018f8:	4613      	mov	r3, r2
 80018fa:	73bb      	strb	r3, [r7, #14]
	u8 Reading;

	SPI_State( usedSPI , SPI_Enable);
 80018fc:	2100      	movs	r1, #0
 80018fe:	2000      	movs	r0, #0
 8001900:	f7ff fc60 	bl	80011c4 <SPI_State>

	/* Send header and address */
	SPI_SynchTransceiveByte( usedSPI , INST_WRITE , &Reading );
 8001904:	f107 0316 	add.w	r3, r7, #22
 8001908:	461a      	mov	r2, r3
 800190a:	2102      	movs	r1, #2
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff fc1d 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , TXB0CTRL , &Reading );
 8001912:	f107 0316 	add.w	r3, r7, #22
 8001916:	461a      	mov	r2, r3
 8001918:	2130      	movs	r1, #48	; 0x30
 800191a:	2000      	movs	r0, #0
 800191c:	f7ff fc16 	bl	800114c <SPI_SynchTransceiveByte>

	/* Setup message priority */
	SPI_SynchTransceiveByte( usedSPI , ( properties >> 6 ) , &Reading );
 8001920:	7bbb      	ldrb	r3, [r7, #14]
 8001922:	099b      	lsrs	r3, r3, #6
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f107 0216 	add.w	r2, r7, #22
 800192a:	4619      	mov	r1, r3
 800192c:	2000      	movs	r0, #0
 800192e:	f7ff fc0d 	bl	800114c <SPI_SynchTransceiveByte>

	/* Setup standard or extended identifier */
	SPI_SynchTransceiveByte( usedSPI , ( u8 )( msgID >> 3 ) , &Reading );
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	08db      	lsrs	r3, r3, #3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f107 0216 	add.w	r2, r7, #22
 800193c:	4619      	mov	r1, r3
 800193e:	2000      	movs	r0, #0
 8001940:	f7ff fc04 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , ( u8 )( msgID << 5 ) , &Reading );
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	b2db      	uxtb	r3, r3
 8001948:	015b      	lsls	r3, r3, #5
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f107 0216 	add.w	r2, r7, #22
 8001950:	4619      	mov	r1, r3
 8001952:	2000      	movs	r0, #0
 8001954:	f7ff fbfa 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , 0 , &Reading );
 8001958:	f107 0316 	add.w	r3, r7, #22
 800195c:	461a      	mov	r2, r3
 800195e:	2100      	movs	r1, #0
 8001960:	2000      	movs	r0, #0
 8001962:	f7ff fbf3 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , 0 , &Reading );
 8001966:	f107 0316 	add.w	r3, r7, #22
 800196a:	461a      	mov	r2, r3
 800196c:	2100      	movs	r1, #0
 800196e:	2000      	movs	r0, #0
 8001970:	f7ff fbec 	bl	800114c <SPI_SynchTransceiveByte>

	/* Setup message length and RTR bit */
	SPI_SynchTransceiveByte( usedSPI , ( properties & 0x0F ) , &Reading );
 8001974:	7bbb      	ldrb	r3, [r7, #14]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	b2db      	uxtb	r3, r3
 800197c:	f107 0216 	add.w	r2, r7, #22
 8001980:	4619      	mov	r1, r3
 8001982:	2000      	movs	r0, #0
 8001984:	f7ff fbe2 	bl	800114c <SPI_SynchTransceiveByte>

	/* Store the message into the buffer */
	for( u8 i = 0 ; i < ( properties & 0x0F ) ; i++ )
 8001988:	2300      	movs	r3, #0
 800198a:	75fb      	strb	r3, [r7, #23]
 800198c:	e00c      	b.n	80019a8 <MCP2515_VidSendCANmsg+0xc0>
	{
		SPI_SynchTransceiveByte( usedSPI , data[ i ] , &Reading );
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	f107 0216 	add.w	r2, r7, #22
 800199a:	4619      	mov	r1, r3
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fbd5 	bl	800114c <SPI_SynchTransceiveByte>
	for( u8 i = 0 ; i < ( properties & 0x0F ) ; i++ )
 80019a2:	7dfb      	ldrb	r3, [r7, #23]
 80019a4:	3301      	adds	r3, #1
 80019a6:	75fb      	strb	r3, [r7, #23]
 80019a8:	7dfa      	ldrb	r2, [r7, #23]
 80019aa:	7bbb      	ldrb	r3, [r7, #14]
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dbec      	blt.n	800198e <MCP2515_VidSendCANmsg+0xa6>
	}

	/* Release the bus */
	SPI_State( usedSPI , SPI_Disable);
 80019b4:	2101      	movs	r1, #1
 80019b6:	2000      	movs	r0, #0
 80019b8:	f7ff fc04 	bl	80011c4 <SPI_State>

	/* Send request to send */
	SPI_State( usedSPI , SPI_Enable);
 80019bc:	2100      	movs	r1, #0
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff fc00 	bl	80011c4 <SPI_State>
	SPI_SynchTransceiveByte( usedSPI , INST_RTS_TXB0 , &Reading );
 80019c4:	f107 0316 	add.w	r3, r7, #22
 80019c8:	461a      	mov	r2, r3
 80019ca:	2181      	movs	r1, #129	; 0x81
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff fbbd 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_State( usedSPI , SPI_Disable);
 80019d2:	2101      	movs	r1, #1
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff fbf5 	bl	80011c4 <SPI_State>
}
 80019da:	bf00      	nop
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <MCP2515_VidSetRollover>:


/****************************RX*******************************/
void MCP2515_VidSetRollover(u8 value)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	71fb      	strb	r3, [r7, #7]
	MCP2515_VidChangeBits( RXB0CTRL , ( 1 << BUKT ) , ( value << BUKT ) );
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	2104      	movs	r1, #4
 80019f6:	2060      	movs	r0, #96	; 0x60
 80019f8:	f7ff ff12 	bl	8001820 <MCP2515_VidChangeBits>
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <MCP2515_VidSetMask>:


void MCP2515_VidSetMask(u8 maskAddress, u32 maskValue, u8 extended)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
 8001a10:	4613      	mov	r3, r2
 8001a12:	71bb      	strb	r3, [r7, #6]
	u8 Reading;

	SPI_State(usedSPI, SPI_Enable);
 8001a14:	2100      	movs	r1, #0
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff fbd4 	bl	80011c4 <SPI_State>
	SPI_SynchTransceiveByte( usedSPI , INST_WRITE , &Reading );
 8001a1c:	f107 030f 	add.w	r3, r7, #15
 8001a20:	461a      	mov	r2, r3
 8001a22:	2102      	movs	r1, #2
 8001a24:	2000      	movs	r0, #0
 8001a26:	f7ff fb91 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , maskAddress , &Reading );
 8001a2a:	f107 020f 	add.w	r2, r7, #15
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4619      	mov	r1, r3
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff fb8a 	bl	800114c <SPI_SynchTransceiveByte>

	if( extended )
 8001a38:	79bb      	ldrb	r3, [r7, #6]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d02d      	beq.n	8001a9a <MCP2515_VidSetMask+0x96>
	{
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( maskValue >> 3 ) , &Reading );
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	08db      	lsrs	r3, r3, #3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	f107 020f 	add.w	r2, r7, #15
 8001a48:	4619      	mov	r1, r3
 8001a4a:	2000      	movs	r0, #0
 8001a4c:	f7ff fb7e 	bl	800114c <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( maskValue << 5 ) | ( 1 << 3 ) | ( u8 ) ( maskValue >> 27 ) , &Reading );
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	015b      	lsls	r3, r3, #5
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	0edb      	lsrs	r3, r3, #27
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	f043 0308 	orr.w	r3, r3, #8
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f107 020f 	add.w	r2, r7, #15
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f7ff fb6c 	bl	800114c <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( maskValue >> 19 ) , &Reading );
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	0cdb      	lsrs	r3, r3, #19
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	f107 020f 	add.w	r2, r7, #15
 8001a7e:	4619      	mov	r1, r3
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff fb63 	bl	800114c <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( maskValue >> 11 ) , &Reading );
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	0adb      	lsrs	r3, r3, #11
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f107 020f 	add.w	r2, r7, #15
 8001a90:	4619      	mov	r1, r3
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fb5a 	bl	800114c <SPI_SynchTransceiveByte>
 8001a98:	e012      	b.n	8001ac0 <MCP2515_VidSetMask+0xbc>
	}
	else
	{
		// standard address
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( maskValue >> 3 ) , &Reading );
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f107 020f 	add.w	r2, r7, #15
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f7ff fb50 	bl	800114c <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( maskValue << 5 ) , &Reading );
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	015b      	lsls	r3, r3, #5
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	f107 020f 	add.w	r2, r7, #15
 8001ab8:	4619      	mov	r1, r3
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff fb46 	bl	800114c <SPI_SynchTransceiveByte>
	}

	SPI_State( usedSPI, SPI_Disable );
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff fb7e 	bl	80011c4 <SPI_State>
}
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <MCP2515_VidSetFilter>:


void MCP2515_VidSetFilter(u8 filterAddress, u32 filterValue, u8 extended)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
 8001adc:	4613      	mov	r3, r2
 8001ade:	71bb      	strb	r3, [r7, #6]
	u8 Reading;

	SPI_State(usedSPI, SPI_Enable);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fb6e 	bl	80011c4 <SPI_State>
	SPI_SynchTransceiveByte( usedSPI , INST_WRITE , &Reading );
 8001ae8:	f107 030f 	add.w	r3, r7, #15
 8001aec:	461a      	mov	r2, r3
 8001aee:	2102      	movs	r1, #2
 8001af0:	2000      	movs	r0, #0
 8001af2:	f7ff fb2b 	bl	800114c <SPI_SynchTransceiveByte>
	SPI_SynchTransceiveByte( usedSPI , filterAddress , &Reading );
 8001af6:	f107 020f 	add.w	r2, r7, #15
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	4619      	mov	r1, r3
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fb24 	bl	800114c <SPI_SynchTransceiveByte>

	if( extended )
 8001b04:	79bb      	ldrb	r3, [r7, #6]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d02d      	beq.n	8001b66 <MCP2515_VidSetFilter+0x96>
	{
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( filterValue >> 3 ) , &Reading );
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	08db      	lsrs	r3, r3, #3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	f107 020f 	add.w	r2, r7, #15
 8001b14:	4619      	mov	r1, r3
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff fb18 	bl	800114c <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( filterValue << 5 ) | ( 1 << 3 ) | ( u8 ) ( filterValue >> 27 ) , &Reading );
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	015b      	lsls	r3, r3, #5
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	0edb      	lsrs	r3, r3, #27
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f043 0308 	orr.w	r3, r3, #8
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	f107 020f 	add.w	r2, r7, #15
 8001b38:	4619      	mov	r1, r3
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff fb06 	bl	800114c <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( filterValue >> 19 ) , &Reading );
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	0cdb      	lsrs	r3, r3, #19
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f107 020f 	add.w	r2, r7, #15
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fafd 	bl	800114c <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( filterValue >> 11 ) , &Reading );
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	0adb      	lsrs	r3, r3, #11
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f107 020f 	add.w	r2, r7, #15
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7ff faf4 	bl	800114c <SPI_SynchTransceiveByte>
 8001b64:	e012      	b.n	8001b8c <MCP2515_VidSetFilter+0xbc>
	}
	else
	{
		// standard address
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( filterValue >> 3 ) , &Reading );
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f107 020f 	add.w	r2, r7, #15
 8001b70:	4619      	mov	r1, r3
 8001b72:	2000      	movs	r0, #0
 8001b74:	f7ff faea 	bl	800114c <SPI_SynchTransceiveByte>
		SPI_SynchTransceiveByte( usedSPI, ( u8 ) ( filterValue << 5 ) , &Reading );
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	015b      	lsls	r3, r3, #5
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	f107 020f 	add.w	r2, r7, #15
 8001b84:	4619      	mov	r1, r3
 8001b86:	2000      	movs	r0, #0
 8001b88:	f7ff fae0 	bl	800114c <SPI_SynchTransceiveByte>
	}

	SPI_State( usedSPI, SPI_Disable );
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff fb18 	bl	80011c4 <SPI_State>
}
 8001b94:	bf00      	nop
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <MCP2515_VidReceiveInit>:


void MCP2515_VidReceiveInit(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	SPI_t spi =
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	703b      	strb	r3, [r7, #0]
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	707b      	strb	r3, [r7, #1]
 8001baa:	2300      	movs	r3, #0
 8001bac:	70bb      	strb	r3, [r7, #2]
 8001bae:	2300      	movs	r3, #0
 8001bb0:	70fb      	strb	r3, [r7, #3]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	713b      	strb	r3, [r7, #4]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	717b      	strb	r3, [r7, #5]
			.SPI_Polartity = SPI_ClkPol_IdleLow,
			.SPI_ClkRate   = SPI_ClkRateDiv2,
			.SPI_DataOrder = SPI_MSBFirst,
	};

	SPI_Init( &spi );
 8001bba:	463b      	mov	r3, r7
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff f9ed 	bl	8000f9c <SPI_Init>

	MCP2515_VidReset();
 8001bc2:	f7ff fe18 	bl	80017f6 <MCP2515_VidReset>

	//	// enter configuration mode and enable CLKOUT with no prescaler
	MCP2515_VidWriteRegister( CANCTRL, 0x84 );
 8001bc6:	2184      	movs	r1, #132	; 0x84
 8001bc8:	200f      	movs	r0, #15
 8001bca:	f7ff fdcf 	bl	800176c <MCP2515_VidWriteRegister>

	//	// to run at 250KHz bitrate using 8MHz osc
	MCP2515_VidSetBitTiming( ( 2 << 6 ) , ( 1 << 7 ) | ( 6 << 3 ) | ( 1 ) , ( 5 ) );
 8001bce:	2205      	movs	r2, #5
 8001bd0:	21b1      	movs	r1, #177	; 0xb1
 8001bd2:	2080      	movs	r0, #128	; 0x80
 8001bd4:	f7ff fdf3 	bl	80017be <MCP2515_VidSetBitTiming>

	// accept all messages
	MCP2515_VidSetMask( RXM0SIDH , 0xFFFF , 0 );
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001bde:	2020      	movs	r0, #32
 8001be0:	f7ff ff10 	bl	8001a04 <MCP2515_VidSetMask>
	//MCP2515_VidSetFilter( RXF0SIDH , 0x7E1 , 0 );
	//MCP2515_VidSetFilter( RXF1SIDH , 0x771 , 0 );
	MCP2515_VidSetFilter( RXF0SIDH , 0x771 , 0 );
 8001be4:	2200      	movs	r2, #0
 8001be6:	f240 7171 	movw	r1, #1905	; 0x771
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff ff70 	bl	8001ad0 <MCP2515_VidSetFilter>
	MCP2515_VidSetRollover( 1 );
 8001bf0:	2001      	movs	r0, #1
 8001bf2:	f7ff fef6 	bl	80019e2 <MCP2515_VidSetRollover>

	MCP2515_VidWriteRegister( CANINTE , ( 1 << RX0IE ) );
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	202b      	movs	r0, #43	; 0x2b
 8001bfa:	f7ff fdb7 	bl	800176c <MCP2515_VidWriteRegister>

	MCP2515_VidSetMode( MCP2515_MODE_NORMAL );
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff fe3f 	bl	8001882 <MCP2515_VidSetMode>
}
 8001c04:	bf00      	nop
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <Absolute>:
	pid->output = 0;

}

u32 Absolute(s32 number)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	if(number<0)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	da02      	bge.n	8001c20 <Absolute+0x14>
	{
		return (-1*(number));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	425b      	negs	r3, r3
 8001c1e:	e000      	b.n	8001c22 <Absolute+0x16>
	}
	else
	{
		return number;
 8001c20:	687b      	ldr	r3, [r7, #4]
	}
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <CommHandlerInit>:

extern u8 readBuffer[];


void CommHandlerInit( u8 Copy_u8Mode )
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	4603      	mov	r3, r0
 8001c34:	71fb      	strb	r3, [r7, #7]
	if ( Copy_u8Mode == TRANSMIT )
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d102      	bne.n	8001c42 <CommHandlerInit+0x16>
		MCP2515_VidInit();
 8001c3c:	f7ff fe32 	bl	80018a4 <MCP2515_VidInit>
	else if	( Copy_u8Mode == RECIEVE )
		MCP2515_VidReceiveInit();
}
 8001c40:	e004      	b.n	8001c4c <CommHandlerInit+0x20>
	else if	( Copy_u8Mode == RECIEVE )
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d101      	bne.n	8001c4c <CommHandlerInit+0x20>
		MCP2515_VidReceiveInit();
 8001c48:	f7ff ffa8 	bl	8001b9c <MCP2515_VidReceiveInit>
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <CommHandlerSend>:
	return DataRx;
}

void CommHandlerSend(Tx_t* Tx)

{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	u8 Data[8]={0};
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	2300      	movs	r3, #0
 8001c62:	613b      	str	r3, [r7, #16]

	/*				Entering the ID in the first Array element				*/
	switch(Tx -> DataType)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	79db      	ldrb	r3, [r3, #7]
 8001c68:	2b03      	cmp	r3, #3
 8001c6a:	d00c      	beq.n	8001c86 <CommHandlerSend+0x32>
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	dc0d      	bgt.n	8001c8c <CommHandlerSend+0x38>
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d002      	beq.n	8001c7a <CommHandlerSend+0x26>
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d003      	beq.n	8001c80 <CommHandlerSend+0x2c>
 8001c78:	e008      	b.n	8001c8c <CommHandlerSend+0x38>
	{
	case DISTANCE: Data[0] = 1; break;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	733b      	strb	r3, [r7, #12]
 8001c7e:	e005      	b.n	8001c8c <CommHandlerSend+0x38>
	case SPEED:    Data[0] = 2; break;
 8001c80:	2302      	movs	r3, #2
 8001c82:	733b      	strb	r3, [r7, #12]
 8001c84:	e002      	b.n	8001c8c <CommHandlerSend+0x38>
	case STEERING: Data[0] = 3; break;
 8001c86:	2303      	movs	r3, #3
 8001c88:	733b      	strb	r3, [r7, #12]
 8001c8a:	bf00      	nop
	}
	Data[1]= Tx -> DataNoBytes ;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	799b      	ldrb	r3, [r3, #6]
 8001c90:	737b      	strb	r3, [r7, #13]


if(Tx -> DataNoBytes > 4)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	799b      	ldrb	r3, [r3, #6]
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d902      	bls.n	8001ca0 <CommHandlerSend+0x4c>
{
	Tx -> DataNoBytes = 4;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	719a      	strb	r2, [r3, #6]
}

	u32 Element2Send = Tx -> Data;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	61fb      	str	r3, [r7, #28]
	u32 Temp=Element2Send;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	61bb      	str	r3, [r7, #24]
	u8 counter= Tx -> DataNoBytes + 1 ;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	799b      	ldrb	r3, [r3, #6]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	75fb      	strb	r3, [r7, #23]


	/*				Entering the Data Elements in the Array				*/
	while(Temp!=0)
 8001cb2:	e024      	b.n	8001cfe <CommHandlerSend+0xaa>
	{
		if(counter == 2 && Temp > 9 )
 8001cb4:	7dfb      	ldrb	r3, [r7, #23]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d106      	bne.n	8001cc8 <CommHandlerSend+0x74>
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	2b09      	cmp	r3, #9
 8001cbe:	d903      	bls.n	8001cc8 <CommHandlerSend+0x74>
		{
			Data[2] = Temp;
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	73bb      	strb	r3, [r7, #14]
			break;
 8001cc6:	e01d      	b.n	8001d04 <CommHandlerSend+0xb0>
		}
		else
		{
			Temp = Temp / 10;
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <CommHandlerSend+0xcc>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	08db      	lsrs	r3, r3, #3
 8001cd2:	61bb      	str	r3, [r7, #24]
			Data[counter] = Element2Send % 10;
 8001cd4:	69f9      	ldr	r1, [r7, #28]
 8001cd6:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <CommHandlerSend+0xcc>)
 8001cd8:	fba3 2301 	umull	r2, r3, r3, r1
 8001cdc:	08da      	lsrs	r2, r3, #3
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	1aca      	subs	r2, r1, r3
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	3320      	adds	r3, #32
 8001cee:	443b      	add	r3, r7
 8001cf0:	f803 2c14 	strb.w	r2, [r3, #-20]
			counter-- ;
 8001cf4:	7dfb      	ldrb	r3, [r7, #23]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	75fb      	strb	r3, [r7, #23]
			Element2Send = Temp;
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	61fb      	str	r3, [r7, #28]
	while(Temp!=0)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1d7      	bne.n	8001cb4 <CommHandlerSend+0x60>
		}
	}

	MCP2515_VidSendCANmsg( 0 , Tx -> DataID , Data , 8 );
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	889b      	ldrh	r3, [r3, #4]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f107 020c 	add.w	r2, r7, #12
 8001d0e:	2308      	movs	r3, #8
 8001d10:	2000      	movs	r0, #0
 8001d12:	f7ff fde9 	bl	80018e8 <MCP2515_VidSendCANmsg>
}
 8001d16:	bf00      	nop
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	cccccccd 	.word	0xcccccccd

08001d24 <main>:
u32 Last_Distance = 0;
u32 Distance      = 0;


int main (void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
	Tx_t Transmit;

	// Clock init
	RCC_voidInitSysClock();
 8001d2a:	f7fe fc9f 	bl	800066c <RCC_voidInitSysClock>
	RCC_voidEnableClock( RCC_GPIOA  , RCC_APB2 );
 8001d2e:	2102      	movs	r1, #2
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7fe fcb1 	bl	8000698 <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_GPIOB  , RCC_APB2 );
 8001d36:	2102      	movs	r1, #2
 8001d38:	2003      	movs	r0, #3
 8001d3a:	f7fe fcad 	bl	8000698 <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_GPIOC  , RCC_APB2 );
 8001d3e:	2102      	movs	r1, #2
 8001d40:	2004      	movs	r0, #4
 8001d42:	f7fe fca9 	bl	8000698 <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_AFIO   , RCC_APB2 );
 8001d46:	2102      	movs	r1, #2
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7fe fca5 	bl	8000698 <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_TIM2   , RCC_APB1 );
 8001d4e:	2101      	movs	r1, #1
 8001d50:	2000      	movs	r0, #0
 8001d52:	f7fe fca1 	bl	8000698 <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_TIM3   , RCC_APB1 );
 8001d56:	2101      	movs	r1, #1
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f7fe fc9d 	bl	8000698 <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_SPI1   , RCC_APB2 );
 8001d5e:	2102      	movs	r1, #2
 8001d60:	200c      	movs	r0, #12
 8001d62:	f7fe fc99 	bl	8000698 <RCC_voidEnableClock>
	RCC_voidEnableClock( RCC_USART1 , RCC_APB2 );
 8001d66:	2102      	movs	r1, #2
 8001d68:	200e      	movs	r0, #14
 8001d6a:	f7fe fc95 	bl	8000698 <RCC_voidEnableClock>

	// port init
	PORT_voidInit();
 8001d6e:	f7fe fcd5 	bl	800071c <PORT_voidInit>

	// timers init
	MTIM2_voidInit();
 8001d72:	f7fe fe33 	bl	80009dc <MTIM2_voidInit>
	MTIM3_voidInit();
 8001d76:	f7fe fe6b 	bl	8000a50 <MTIM3_voidInit>


	// usart init
	USART_config_t uart =
 8001d7a:	4a36      	ldr	r2, [pc, #216]	; (8001e54 <main+0x130>)
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			.USART_Parity      = USART_EvenParity          ,
			.USART_ParityCheck = USART_ParityCheckDisabled ,
			.USART_StopBits    = USART_1StopBits
	};

	USART_voidInit( &uart );
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fa56 	bl	8001238 <USART_voidInit>


	// communication init
	//CommHandlerInit( RECIEVE );
	CommHandlerInit( TRANSMIT );
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	f7ff ff4d 	bl	8001c2c <CommHandlerInit>


	// ultra-sonic init
	Ultrasonic_t ultra =
 8001d92:	4a31      	ldr	r2, [pc, #196]	; (8001e58 <main+0x134>)
 8001d94:	463b      	mov	r3, r7
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	4611      	mov	r1, r2
 8001d9a:	8019      	strh	r1, [r3, #0]
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	0c12      	lsrs	r2, r2, #16
 8001da0:	701a      	strb	r2, [r3, #0]
			.TrigPort     = MDIO_PORTA ,
			.TrigPin      = MDIO_PIN1  ,
			.Echo_ICU_TIM = TIM2
	};

	HULTRASONIC_voidInit( &ultra );
 8001da2:	463b      	mov	r3, r7
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fc13 	bl	80015d0 <HULTRASONIC_voidInit>
	};*/



	// start the counter to get the reading of the ultra-sonic every 10 milli
	MTIM3_voidStartCounter();
 8001daa:	f7fe fe95 	bl	8000ad8 <MTIM3_voidStartCounter>
	while(1)
	{



		Current_Time = MTIM3_u16GetRemainingTime();
 8001dae:	f7fe febb 	bl	8000b28 <MTIM3_u16GetRemainingTime>
 8001db2:	4603      	mov	r3, r0
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <main+0x138>)
 8001db8:	601a      	str	r2, [r3, #0]

		if ( ( Current_Time - Last_Time ) >= 1050 )
 8001dba:	4b28      	ldr	r3, [pc, #160]	; (8001e5c <main+0x138>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <main+0x13c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f240 4219 	movw	r2, #1049	; 0x419
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d9f0      	bls.n	8001dae <main+0x8a>
		{
			Last_Time = MTIM3_u16GetRemainingTime() ;
 8001dcc:	f7fe feac 	bl	8000b28 <MTIM3_u16GetRemainingTime>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <main+0x13c>)
 8001dd6:	601a      	str	r2, [r3, #0]

			HULTRASONIC_voidGetDistance( &ultra , &Distance );
 8001dd8:	463b      	mov	r3, r7
 8001dda:	4922      	ldr	r1, [pc, #136]	; (8001e64 <main+0x140>)
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fc13 	bl	8001608 <HULTRASONIC_voidGetDistance>

			if( ( Absolute(Last_Distance - Distance ) <= 150 ) || ( Last_Distance == 0 ) )
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <main+0x144>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <main+0x140>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff0d 	bl	8001c0c <Absolute>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b96      	cmp	r3, #150	; 0x96
 8001df6:	d903      	bls.n	8001e00 <main+0xdc>
 8001df8:	4b1b      	ldr	r3, [pc, #108]	; (8001e68 <main+0x144>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d103      	bne.n	8001e08 <main+0xe4>
			{
				Last_Distance = Distance;
 8001e00:	4b18      	ldr	r3, [pc, #96]	; (8001e64 <main+0x140>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <main+0x144>)
 8001e06:	6013      	str	r3, [r2, #0]
			}

			Transmit.Data        = Last_Distance    ;
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <main+0x144>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	613b      	str	r3, [r7, #16]
			Transmit.DataID      = DISTACNE_MSG_ID  ;
 8001e0e:	f240 7371 	movw	r3, #1905	; 0x771
 8001e12:	82bb      	strh	r3, [r7, #20]
			Transmit.DataNoBytes = 4                ;
 8001e14:	2304      	movs	r3, #4
 8001e16:	75bb      	strb	r3, [r7, #22]
			Transmit.DataType    = DISTANCE         ;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	75fb      	strb	r3, [r7, #23]

			CommHandlerSend( &Transmit );
 8001e1c:	f107 0310 	add.w	r3, r7, #16
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff ff17 	bl	8001c54 <CommHandlerSend>

			USART_voidTransmitByteSynch( 'D' , USART1 );
 8001e26:	2100      	movs	r1, #0
 8001e28:	2044      	movs	r0, #68	; 0x44
 8001e2a:	f7ff fb43 	bl	80014b4 <USART_voidTransmitByteSynch>
			USART_voidTransmitByteSynch( ':' , USART1 );
 8001e2e:	2100      	movs	r1, #0
 8001e30:	203a      	movs	r0, #58	; 0x3a
 8001e32:	f7ff fb3f 	bl	80014b4 <USART_voidTransmitByteSynch>
			USART_voidSendNumber( Transmit.Data , USART1 );
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fb66 	bl	800150c <USART_voidSendNumber>
			USART_voidTransmitByteSynch( '\r' , USART1 );
 8001e40:	2100      	movs	r1, #0
 8001e42:	200d      	movs	r0, #13
 8001e44:	f7ff fb36 	bl	80014b4 <USART_voidTransmitByteSynch>
			USART_voidTransmitByteSynch( '\n' , USART1 );
 8001e48:	2100      	movs	r1, #0
 8001e4a:	200a      	movs	r0, #10
 8001e4c:	f7ff fb32 	bl	80014b4 <USART_voidTransmitByteSynch>
		Current_Time = MTIM3_u16GetRemainingTime();
 8001e50:	e7ad      	b.n	8001dae <main+0x8a>
 8001e52:	bf00      	nop
 8001e54:	08001f28 	.word	0x08001f28
 8001e58:	08001f34 	.word	0x08001f34
 8001e5c:	20000074 	.word	0x20000074
 8001e60:	20000078 	.word	0x20000078
 8001e64:	20000080 	.word	0x20000080
 8001e68:	2000007c 	.word	0x2000007c

08001e6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e6e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e70:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e74:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e76:	490d      	ldr	r1, [pc, #52]	; (8001eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <LoopForever+0xe>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e7c:	e002      	b.n	8001e84 <LoopCopyDataInit>

08001e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e82:	3304      	adds	r3, #4

08001e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e88:	d3f9      	bcc.n	8001e7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e8c:	4c0a      	ldr	r4, [pc, #40]	; (8001eb8 <LoopForever+0x16>)
  movs r3, #0
 8001e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e90:	e001      	b.n	8001e96 <LoopFillZerobss>

08001e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e94:	3204      	adds	r2, #4

08001e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e98:	d3fb      	bcc.n	8001e92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e9a:	f000 f811 	bl	8001ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e9e:	f7ff ff41 	bl	8001d24 <main>

08001ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ea2:	e7fe      	b.n	8001ea2 <LoopForever>
  ldr   r0, =_estack
 8001ea4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001eb0:	08001f54 	.word	0x08001f54
  ldr r2, =_sbss
 8001eb4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001eb8:	20000084 	.word	0x20000084

08001ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ebc:	e7fe      	b.n	8001ebc <ADC1_2_IRQHandler>
	...

08001ec0 <__libc_init_array>:
 8001ec0:	b570      	push	{r4, r5, r6, lr}
 8001ec2:	2600      	movs	r6, #0
 8001ec4:	4d0c      	ldr	r5, [pc, #48]	; (8001ef8 <__libc_init_array+0x38>)
 8001ec6:	4c0d      	ldr	r4, [pc, #52]	; (8001efc <__libc_init_array+0x3c>)
 8001ec8:	1b64      	subs	r4, r4, r5
 8001eca:	10a4      	asrs	r4, r4, #2
 8001ecc:	42a6      	cmp	r6, r4
 8001ece:	d109      	bne.n	8001ee4 <__libc_init_array+0x24>
 8001ed0:	f000 f81a 	bl	8001f08 <_init>
 8001ed4:	2600      	movs	r6, #0
 8001ed6:	4d0a      	ldr	r5, [pc, #40]	; (8001f00 <__libc_init_array+0x40>)
 8001ed8:	4c0a      	ldr	r4, [pc, #40]	; (8001f04 <__libc_init_array+0x44>)
 8001eda:	1b64      	subs	r4, r4, r5
 8001edc:	10a4      	asrs	r4, r4, #2
 8001ede:	42a6      	cmp	r6, r4
 8001ee0:	d105      	bne.n	8001eee <__libc_init_array+0x2e>
 8001ee2:	bd70      	pop	{r4, r5, r6, pc}
 8001ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ee8:	4798      	blx	r3
 8001eea:	3601      	adds	r6, #1
 8001eec:	e7ee      	b.n	8001ecc <__libc_init_array+0xc>
 8001eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ef2:	4798      	blx	r3
 8001ef4:	3601      	adds	r6, #1
 8001ef6:	e7f2      	b.n	8001ede <__libc_init_array+0x1e>
 8001ef8:	08001f4c 	.word	0x08001f4c
 8001efc:	08001f4c 	.word	0x08001f4c
 8001f00:	08001f4c 	.word	0x08001f4c
 8001f04:	08001f50 	.word	0x08001f50

08001f08 <_init>:
 8001f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f0a:	bf00      	nop
 8001f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f0e:	bc08      	pop	{r3}
 8001f10:	469e      	mov	lr, r3
 8001f12:	4770      	bx	lr

08001f14 <_fini>:
 8001f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f16:	bf00      	nop
 8001f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f1a:	bc08      	pop	{r3}
 8001f1c:	469e      	mov	lr, r3
 8001f1e:	4770      	bx	lr
